41 88 0C F0 FF FF FF 00 00 09 10 FC FF 00 00 01 BC 57 F6 39 02 00 4B 12 00 08 60

AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
                       SAMPLEAPP_PERIODIC_CLUSTERID,
                       1,
                       (uint8*)&SampleAppPeriodicCounter,
                       &SampleApp_TransID,
                       AF_DISCV_ROUTE,
                       AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
                   

/*********************************************************************
 * @fn      osal_start_timerEx
 *
 * @brief
 *
 *   This function is called to start a timer to expire in n mSecs.
 *   When the timer expires, the calling task will get the specified event.
 *
 * @param   uint8 taskID - task id to set timer for
 * @param   uint16 event_id - event to be notified with
 * @param   UNINT16 timeout_value - in milliseconds.
 *
 * @return  SUCCESS, or NO_TIMER_AVAIL.
 */
uint8 osal_start_timerEx( uint8 taskID, uint16 event_id, uint16 timeout_value )


mac_mem.c
MAC_INTERNAL_API void macMemWriteTxFifo(uint8 * pData, uint8 len)							//write
MAC_INTERNAL_API void macMemReadRxFifo(uint8 * pData, uint8 len)

#define MAC_RADIO_RX_FIFO_HAS_OVERFLOWED()            ((FSMSTAT1 & FIFOP) && !(FSMSTAT1 & FIFO))
#define MAC_RADIO_RX_FIFO_IS_EMPTY()                  (!(FSMSTAT1 & FIFO) && !(FSMSTAT1 & FIFOP))

	MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
	MSGpkt->groupId = aff->GroupID;
	MSGpkt->clusterId = aff->ClusterID;
	afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
	MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
	MSGpkt->endPoint = epDesc->endPoint;
	MSGpkt->wasBroadcast = aff->wasBroadcast;
	MSGpkt->LinkQuality = sig->LinkQuality;
	MSGpkt->correlation = sig->correlation;
	MSGpkt->rssi = sig->rssi;
	MSGpkt->SecurityUse = SecurityUse;
	MSGpkt->timestamp = timestamp;
	MSGpkt->macDestAddr = aff->macDestAddr;
	MSGpkt->srcAddr.panId = SrcPanId;
	MSGpkt->cmd.TransSeqNumber = 0;
	MSGpkt->cmd.DataLength = aff->asduLength;
	
