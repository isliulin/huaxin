///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.4.40412/W32 for 8051        08/Jul/2016  22:45:54 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  near                                              /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  2,separate,16,inc                                 /
//    Source file        =  C:\Texas Instruments\SimpliciTI-IAR-1.2.0\Compone /
//                          nts\simpliciti\nwk\nwk_globals.c                  /
//    Command line       =  -f "C:\Texas Instruments\SimpliciTI-IAR-1.2.0\Pro /
//                          jects\Examples\SRF04\UART_Bridge\IAR\Configuratio /
//                          n\LinkTo\smpl_config.dat" (-DNUM_CONNECTIONS=2    /
//                          -DSIZE_INFRAME_Q=2 -DSIZE_OUTFRAME_Q=2            /
//                          "-DTHIS_DEVICE_ADDRESS={0x79, 0x56, 0x34, 0x12}"  /
//                          -DEND_DEVICE -DLINK_TO -DxNWK_PLL_REFERENCE_CLOCK /
//                          ) -f "C:\Texas Instruments\SimpliciTI-IAR-1.2.0\P /
//                          rojects\Examples\SRF04\UART_Bridge\IAR\Configurat /
//                          ion\smpl_nwk_config.dat" (-DMAX_HOPS=3            /
//                          -DMAX_HOPS_FROM_AP=1 -DMAX_NWK_PAYLOAD=34         /
//                          -DMAX_APP_PAYLOAD=10 -DDEFAULT_LINK_TOKEN=0x01020 /
//                          304 -DDEFAULT_JOIN_TOKEN=0x05060708               /
//                          -DxFREQUENCY_AGILITY -DxAPP_AUTO_ACK              /
//                          -DxEXTENDED_API -DxSMPL_SECURE                    /
//                          -DxNVOBJECT_SUPPORT -DxSW_TIMER                   /
//                          -DxFREQUENCY_HOPPING -DBSP_TIMER_USED=1           /
//                          -DNWK_PLL_SHOW_LOCATION_INDICATORS                /
//                          -DUART_NUMBER=UART_NUMBER_0                       /
//                          -DUART_LOCATION=UART_LOCATION_1                   /
//                          -DUART_BAUD_RATE=9600 -DUART_FLOW_CONTROL=UART_FL /
//                          OW_CONTROL_OFF -DUART_PARITY_MODE=UART_PARITY_NON /
//                          E -DUART_STOP_BITS=UART_1_STOP_BIT) "C:\Texas     /
//                          Instruments\SimpliciTI-IAR-1.2.0\Components\simpl /
//                          iciti\nwk\nwk_globals.c" -D                       /
//                          "MCU_H=\"ioCC1110.h\"" -D MRFI_CC1110 -lB         /
//                          "C:\Texas Instruments\SimpliciTI-IAR-1.2.0\Projec /
//                          ts\Examples\SRF04\UART_Bridge\IAR\CC1110-LinkTo\L /
//                          ist\" -o "C:\Texas Instruments\SimpliciTI-IAR-1.2 /
//                          .0\Projects\Examples\SRF04\UART_Bridge\IAR\CC1110 /
//                          -LinkTo\Obj\" -e --debug --core=plain             /
//                          --dptr=16,2,separate,inc --data_model=large       /
//                          --code_model=near --calling_convention=xdata_reen /
//                          trant --place_constants=data --nr_virtual_regs 8  /
//                          -I "C:\Texas Instruments\SimpliciTI-IAR-1.2.0\Pro /
//                          jects\Examples\SRF04\UART_Bridge\IAR\..\..\..\..\ /
//                          ..\Components\bsp\" -I "C:\Texas                  /
//                          Instruments\SimpliciTI-IAR-1.2.0\Projects\Example /
//                          s\SRF04\UART_Bridge\IAR\..\..\..\..\..\Components /
//                          \bsp\drivers\" -I "C:\Texas                       /
//                          Instruments\SimpliciTI-IAR-1.2.0\Projects\Example /
//                          s\SRF04\UART_Bridge\IAR\..\..\..\..\..\Components /
//                          \bsp\boards\SRF04EB\" -I "C:\Texas                /
//                          Instruments\SimpliciTI-IAR-1.2.0\Projects\Example /
//                          s\SRF04\UART_Bridge\IAR\..\..\..\..\..\Components /
//                          \mrfi\" -I "C:\Texas Instruments\SimpliciTI-IAR-1 /
//                          .2.0\Projects\Examples\SRF04\UART_Bridge\IAR\..\. /
//                          .\..\..\..\Components\SimpliciTI\nwk\" -I         /
//                          "C:\Texas Instruments\SimpliciTI-IAR-1.2.0\Projec /
//                          ts\Examples\SRF04\UART_Bridge\IAR\..\..\..\..\..\ /
//                          Components\SimpliciTI\nwk_applications\" -Ohs     /
//                          --require_prototypes                              /
//    List file          =  C:\Texas Instruments\SimpliciTI-IAR-1.2.0\Project /
//                          s\Examples\SRF04\UART_Bridge\IAR\CC1110-LinkTo\Li /
//                          st\nwk_globals.s51                                /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME nwk_globals

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?DPS
        EXTERN ?FUNC_ENTER_XDATA
        EXTERN ?FUNC_LEAVE_XDATA
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC nwk_getAPAddress
        PUBLIC nwk_getBCastAddress
        PUBLIC nwk_getFWVersion
        PUBLIC nwk_getMyAddress
        PUBLIC nwk_getProtocolVersion
        PUBLIC nwk_globalsInit
        PUBLIC nwk_setAPAddress
        PUBLIC nwk_setMyAddress

        EXTERN memset
        EXTERN memcpy
        EXTERN memcmp
        EXTERN mrfiBroadcastAddr

// C:\Texas Instruments\SimpliciTI-IAR-1.2.0\Components\simpliciti\nwk\nwk_globals.c
//    1 /**************************************************************************************************
//    2   Filename:       nwk_globals.c
//    3   Revised:        $Date: 2009-10-27 20:48:11 -0700 (Tue, 27 Oct 2009) $
//    4   Revision:       $Revision: 20995 $
//    5 
//    6   Description:    This file manages global NWK data.
//    7 
//    8   Copyright 2007-2009 Texas Instruments Incorporated. All rights reserved.
//    9 
//   10   IMPORTANT: Your use of this Software is limited to those specific rights granted under
//   11   the terms of a software license agreement between the user who downloaded the software,
//   12   his/her employer (which must be your employer) and Texas Instruments Incorporated (the
//   13   "License"). You may not use this Software unless you agree to abide by the terms of the
//   14   License. The License limits your use, and you acknowledge, that the Software may not be
//   15   modified, copied or distributed unless embedded on a Texas Instruments microcontroller
//   16   or used solely and exclusively in conjunction with a Texas Instruments radio frequency
//   17   transceiver, which is integrated into your product. Other than for the foregoing purpose,
//   18   you may not use, reproduce, copy, prepare derivative works of, modify, distribute,
//   19   perform, display or sell this Software and/or its documentation for any purpose.
//   20 
//   21   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE PROVIDED “AS IS”
//   22   WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY
//   23   WARRANTY OF MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE.
//   24   IN NO EVENT SHALL TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   25   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER LEGAL EQUITABLE
//   26   THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES INCLUDING BUT NOT LIMITED TO ANY
//   27   INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST
//   28   DATA, COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY
//   29   THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   30 
//   31   Should you have any questions regarding your right to use this Software,
//   32   contact Texas Instruments Incorporated at www.TI.com.
//   33 **************************************************************************************************/
//   34 
//   35 
//   36 /******************************************************************************
//   37  * INCLUDES
//   38  */
//   39 #include <string.h>
//   40 #include "bsp.h"
//   41 #include "mrfi.h"
//   42 #include "nwk_types.h"
//   43 #include "nwk_globals.h"
//   44 
//   45 /******************************************************************************
//   46  * MACROS
//   47  */
//   48 
//   49 /******************************************************************************
//   50  * CONSTANTS AND DEFINES
//   51  */
//   52 
//   53 /******************************************************************************
//   54  * TYPEDEFS
//   55  */
//   56 
//   57 /******************************************************************************
//   58  * LOCAL VARIABLES
//   59  */

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA32
//   60 static const addr_t   sMyROMAddress = THIS_DEVICE_ADDRESS;
sMyROMAddress:
        DS 4
        REQUIRE `?<Initializer for sMyROMAddress>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   61 static addr_t         sAPAddress;
sAPAddress:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   62 static addr_t         sMyRAMAddress;
sMyRAMAddress:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   63 static uint8_t        sRAMAddressIsSet = 0;
sRAMAddressIsSet:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   64 
//   65 /* Version number set as a 4 byte quantity. Each byte is a revision number
//   66  * in the form w.x.y.z. The subfields are each limited to values 0x0-0xFF.
//   67  */

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
//   68 static const smplVersionInfo_t sVersionInfo = {
sVersionInfo:
        DS 5
        REQUIRE `?<Initializer for sVersionInfo>`
        REQUIRE __INIT_XDATA_I
//   69                                                 0x02,  /* protocol version */
//   70                                                 0x01,  /* major revision number */
//   71                                                 0x01,  /* minor revision number */
//   72                                                 0x01,  /* maintenance release number */
//   73                                                 0x00   /* special release */
//   74                                                };
//   75 
//   76 /******************************************************************************
//   77  * LOCAL FUNCTIONS
//   78  */
//   79 
//   80 /******************************************************************************
//   81  * GLOBAL VARIABLES
//   82  */
//   83 
//   84 /******************************************************************************
//   85  * GLOBAL FUNCTIONS
//   86  */
//   87 
//   88 /******************************************************************************
//   89  * @fn          nwk_globalsInit
//   90  *
//   91  * @brief       Initialization of global symbols
//   92  *
//   93  * input parameters
//   94  *
//   95  * output parameters
//   96  *
//   97  * @return   void
//   98  */

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   99 void nwk_globalsInit(void)
nwk_globalsInit:
        CODE
//  100 {
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 9
        ; Auto size: 0
//  101 
//  102   memset(&sAPAddress, 0x00, sizeof(addr_t));
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#sAPAddress & 0xff
        MOV     R3,#(sAPAddress >> 8) & 0xff
        LCALL   memset
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
//  103 
//  104   /* populate RAM address from ROM default if it hasn't laready been set
//  105    * using the IOCTL interface.
//  106    */
//  107   if (!sRAMAddressIsSet)
        MOV     DPTR,#sRAMAddressIsSet
        MOVX    A,@DPTR
        JNZ     ??nwk_globalsInit_0
//  108   {
//  109     memcpy(&sMyRAMAddress, &sMyROMAddress, sizeof(addr_t));
        ; Setup parameters for call to function memcpy
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     R4,#sMyROMAddress & 0xff
        MOV     R5,#(sMyROMAddress >> 8) & 0xff
        MOV     R2,#sMyRAMAddress & 0xff
        MOV     R3,#(sMyRAMAddress >> 8) & 0xff
        LCALL   memcpy
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
//  110     sRAMAddressIsSet = 1;  /* RAM address is now valid */
        MOV     DPTR,#sRAMAddressIsSet
        MOV     A,#0x1
        MOVX    @DPTR,A
//  111   }
//  112 
//  113   return;
??nwk_globalsInit_0:
        SJMP    ??Subroutine1_0
//  114 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine0:
        LCALL   ?DEALLOC_XSTACK8
        REQUIRE ??Subroutine1_0
        ; // Fall through to label ??Subroutine1_0

        RSEG NEAR_CODE:CODE:NOROOT(0)
??Subroutine1_0:
        MOV     R7,#0x2
        LJMP    ?FUNC_LEAVE_XDATA
//  115 
//  116 /******************************************************************************
//  117  * @fn          nwk_getMyAddress
//  118  *
//  119  * @brief       Return a pointer to my address. It comes either from ROM as
//  120  *              set in the configuration file or it was set using the IOCTL
//  121  *              interface -- probably from random bytes.
//  122  *
//  123  * input parameters
//  124  *
//  125  * output parameters
//  126  *
//  127  * @return   pointer to a constant address type object.
//  128  */

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  129 addr_t const *nwk_getMyAddress(void)
nwk_getMyAddress:
        CODE
//  130 {
        PUSH    DPL
        PUSH    DPH
        ; Saved register size: 2
        ; Auto size: 0
//  131   /* This call supports returning a valid pointer before either the
//  132    * initialization or external setting of the address. But caller needs
//  133    * to be careful -- if this routine is called immediately it will return
//  134    * the ROM address. If the application then sets the address using the
//  135    * IOCTL before doing the SMPL_Init() the original pointer is no longer
//  136    * valid as it points to the wrong address.
//  137    */
//  138   return sRAMAddressIsSet ? &sMyRAMAddress : &sMyROMAddress;
        ; Selecting DPTR 0 by inc-method (DPSEL=x)
        ANL     ?DPS,#0xfe
        MOV     DPTR,#sRAMAddressIsSet
        MOVX    A,@DPTR
        JZ      ??nwk_getMyAddress_0
        MOV     R2,#sMyRAMAddress & 0xff
        MOV     R3,#(sMyRAMAddress >> 8) & 0xff
        SJMP    ??nwk_getMyAddress_1
??nwk_getMyAddress_0:
        MOV     R2,#sMyROMAddress & 0xff
        MOV     R3,#(sMyROMAddress >> 8) & 0xff
??nwk_getMyAddress_1:
        POP     DPH
        POP     DPL
        RET
//  139 }
//  140 
//  141 /******************************************************************************
//  142  * @fn          nwk_getFWVersion
//  143  *
//  144  * @brief       Return a pointer to the current firmware version string.
//  145  *
//  146  * input parameters
//  147  *
//  148  * output parameters
//  149  *
//  150  * @return   pointer to a constant uint16_t object.
//  151  */

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  152 uint8_t const *nwk_getFWVersion()
nwk_getFWVersion:
        CODE
//  153 {
        ; Saved register size: 0
        ; Auto size: 0
//  154   return sVersionInfo.fwVerString;
        MOV     R2,#(sVersionInfo + 1) & 0xff
        MOV     R3,#((sVersionInfo + 1) >> 8) & 0xff
        ANL     ?DPS,#0xfe
        RET
//  155 }
//  156 
//  157 /******************************************************************************
//  158  * @fn          nwk_getProtocolVersion
//  159  *
//  160  * @brief       Return the current protocol version.
//  161  *
//  162  * input parameters
//  163  *
//  164  * output parameters
//  165  *
//  166  * @return   Protocol version.
//  167  */

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  168 uint8_t nwk_getProtocolVersion(void)
nwk_getProtocolVersion:
        CODE
//  169 {
        ; Saved register size: 0
        ; Auto size: 0
//  170   return sVersionInfo.protocolVersion;
        MOV     R1,#0x2
        ANL     ?DPS,#0xfe
        RET
//  171 }
//  172 
//  173 /******************************************************************************
//  174  * @fn          nwk_setMyAddress
//  175  *
//  176  * @brief       Set my address object if it hasn't already been set. This call
//  177  *              is referenced by the IOCTL support used to change the device
//  178  *              address. It is effective only if the address has not already
//  179  *              been set.
//  180  *
//  181  * input parameters
//  182  *
//  183  * @param   addr  - pointer to the address object to be used to set my address.
//  184  *
//  185  * output parameters
//  186  *
//  187  * @return   Returns non-zero if request is respected, otherwise returns 0.
//  188  */

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  189 uint8_t nwk_setMyAddress(addr_t *addr)
nwk_setMyAddress:
        CODE
//  190 {
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 9
        ; Auto size: 0
//  191   uint8_t rc = 0;
        MOV     R1,#0x0
//  192 
//  193   if (!sRAMAddressIsSet)
        MOV     DPTR,#sRAMAddressIsSet
        MOVX    A,@DPTR
        JNZ     ??nwk_setMyAddress_0
//  194   {
//  195     memcpy(&sMyRAMAddress, addr, sizeof(addr_t));
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,R1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#sMyRAMAddress & 0xff
        MOV     R3,#(sMyRAMAddress >> 8) & 0xff
        LCALL   memcpy
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
//  196     sRAMAddressIsSet = 1;  /* RAM address is now valid */
        MOV     DPTR,#sRAMAddressIsSet
        MOV     A,#0x1
        MOVX    @DPTR,A
//  197     rc = 1;
        MOV     R1,A
//  198   }
//  199 
//  200   return rc;
??nwk_setMyAddress_0:
        SJMP    ??Subroutine1_0
//  201 }
//  202 
//  203 /******************************************************************************
//  204  * @fn          nwk_setAPAddress
//  205  *
//  206  * @brief       Set the AP's address. Called after the AP address is gleaned
//  207  *              from the Join reply.
//  208  *
//  209  * input parameters
//  210  *
//  211  * output parameters
//  212  *
//  213  * @return   void
//  214  */

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  215 void nwk_setAPAddress(addr_t *addr)
nwk_setAPAddress:
        CODE
//  216 {
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 9
        ; Auto size: 0
//  217 
//  218   memcpy((void *)&sAPAddress, (void *)addr, NET_ADDR_SIZE);
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#sAPAddress & 0xff
        MOV     R3,#(sAPAddress >> 8) & 0xff
        LCALL   memcpy
        MOV     A,#0x2
        LJMP    ?Subroutine0
//  219 
//  220   return;
//  221 }
//  222 
//  223 /******************************************************************************
//  224  * @fn          nwk_getAPAddress
//  225  *
//  226  * @brief       Get the AP's address.
//  227  *
//  228  * input parameters
//  229  *
//  230  * output parameters
//  231  *
//  232  * @return   Pointer to a constant address object or null if the address has not
//  233  *           yet been set.
//  234  */

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  235 addr_t const *nwk_getAPAddress(void)
nwk_getAPAddress:
        CODE
//  236 {
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 9
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
//  237   addr_t addr;
//  238 
//  239   memset(&addr, 0x0, sizeof(addr));
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   memset
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
//  240 
//  241   return !memcmp(&sAPAddress, &addr, NET_ADDR_SIZE) ? 0 : &sAPAddress;
        ; Setup parameters for call to function memcmp
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#sAPAddress & 0xff
        MOV     R3,#(sAPAddress >> 8) & 0xff
        LCALL   memcmp
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??nwk_getAPAddress_0
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??nwk_getAPAddress_1
??nwk_getAPAddress_0:
        MOV     R2,#sAPAddress & 0xff
        MOV     R3,#(sAPAddress >> 8) & 0xff
??nwk_getAPAddress_1:
        MOV     A,#0x4
        LJMP    ?Subroutine0
//  242 }
//  243 
//  244 /******************************************************************************
//  245  * @fn          nwk_getBCastAddress
//  246  *
//  247  * @brief       Get the network broadcast address.
//  248  *
//  249  * input parameters
//  250  *
//  251  * output parameters
//  252  *
//  253  * @return   Pointer to a constant address object.
//  254  */

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  255 addr_t const *nwk_getBCastAddress(void)
nwk_getBCastAddress:
        CODE
//  256 {
        ; Saved register size: 0
        ; Auto size: 0
//  257   return (addr_t const *)mrfiBroadcastAddr;
        MOV     R2,#mrfiBroadcastAddr & 0xff
        MOV     R3,#(mrfiBroadcastAddr >> 8) & 0xff
        ANL     ?DPS,#0xfe
        RET
//  258 }

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sMyROMAddress>`:
        DATA8
        DB 121
        DB 86
        DB 52
        DB 18

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sVersionInfo>`:
        DATA8
        DB 2
        DB 1
        DB 1
        DB 1
        DB 0

        END
// 
// 295 bytes in segment NEAR_CODE
//   9 bytes in segment XDATA_I
//   9 bytes in segment XDATA_ID
//   9 bytes in segment XDATA_Z
// 
// 304 bytes of CODE  memory
//  18 bytes of XDATA memory
//
//Errors: none
//Warnings: none
