<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\obj\CanStm32.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\obj\CanStm32.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Fri Jul 29 00:02:23 2016
<BR><P>
<H3>Maximum Stack Usage =        528 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TaskMonitor &rArr; SleepTimerProc &rArr; DspSlaveSleepScr &rArr; Sleep_Init &rArr; Mode &rArr; ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[12c]">OS_ENTER_CRITICAL</a>
 <LI><a href="#[12e]">OS_EXIT_CRITICAL</a>
 <LI><a href="#[255]">OSStartHighRdy</a>
 <LI><a href="#[253]">OSCtxSw</a>
 <LI><a href="#[250]">OSIntCtxSw</a>
 <LI><a href="#[2b]">PendSV_Handler</a>
 <LI><a href="#[2e1]">ItDisAll</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[24]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">NMI_Handler</a><BR>
 <LI><a href="#[25]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">HardFault_Handler</a><BR>
 <LI><a href="#[26]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">MemManage_Handler</a><BR>
 <LI><a href="#[27]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">BusFault_Handler</a><BR>
 <LI><a href="#[28]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">UsageFault_Handler</a><BR>
 <LI><a href="#[29]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">SVC_Handler</a><BR>
 <LI><a href="#[2a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">DebugMon_Handler</a><BR>
 <LI><a href="#[3f]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">ADC_IRQHandler</a><BR>
 <LI><a href="#[5b]">TaskVoltageCheck</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5b]">TaskVoltageCheck</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3f]">ADC_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[5d]">BkLiteAutoOff</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[65]">BkLiteSelect</a> from menu.o(.text) referenced from menu.o(.constdata)
 <LI><a href="#[67]">BkLiteSw</a> from menu.o(.text) referenced 3 times from menu.o(.constdata)
 <LI><a href="#[4]">BtnAddSub</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[18]">BtnArrParaRes</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[11]">BtnCfnClear</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[10]">BtnCfnClearCancel</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[b]">BtnChScan</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[9]">BtnChSet</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[1d]">BtnExtmApert</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[1c]">BtnExtmIso</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[21]">BtnFbAddSub</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[20]">BtnFbAdj</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[f]">BtnFrq</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[16]">BtnGrModRes</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[15]">BtnGrOnOff</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[17]">BtnGrParaRes</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[8]">BtnGrSel</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[19]">BtnHome</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[a]">BtnIdSel</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[1f]">BtnLoad</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[d]">BtnMemory</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[6]">BtnMenu</a> from lcddriver.o(.text) referenced 8 times from lcddriver.o(.data)
 <LI><a href="#[3]">BtnMstSw</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[e]">BtnMulti</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[13]">BtnPfnMenu</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[7]">BtnRatio</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[12]">BtnRel</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[22]">BtnRgbCheck</a> from lcddriver.o(.text) referenced 8 times from lcddriver.o(.data)
 <LI><a href="#[1e]">BtnSave</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[1a]">BtnSlaveModel</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[1b]">BtnSlaveTest</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[2]">BtnSnrMenu</a> from lcddriver.o(.text) referenced 6 times from lcddriver.o(.data)
 <LI><a href="#[c]">BtnSynSet</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[5]">BtnTtlFeb</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[1]">BtnZoon</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[27]">BusFault_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[5f]">BzOff</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[42]">CAN_RX1_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[43]">CAN_SCE_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[60]">CmrShutterPull</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[66]">ContrastDsp</a> from menu.o(.text) referenced from menu.o(.constdata)
 <LI><a href="#[0]">ContrastSet</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[38]">DMAChannel1_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[39]">DMAChannel2_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[3a]">DMAChannel3_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[3b]">DMAChannel4_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[3c]">DMAChannel5_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[3d]">DMAChannel6_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[3e]">DMAChannel7_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2a]">DebugMon_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[33]">EXTI0_IRQHandler</a> from sys.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[55]">EXTI15_10_IRQHandler</a> from keyadc.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[34]">EXTI1_IRQHandler</a> from keyproc.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[35]">EXTI2_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[36]">EXTI3_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[37]">EXTI4_IRQHandler</a> from main.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[44]">EXTI9_5_IRQHandler</a> from spi.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[31]">FLASH_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[61]">FlaOkAutoOff</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[25]">HardFault_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[4d]">I2C1_ER_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[4c]">I2C1_EV_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[4f]">I2C2_ER_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[4e]">I2C2_EV_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[5e]">LightSlaveTmrProc</a> from flash.o(.text) referenced from main.o(.text)
 <LI><a href="#[14]">LoadCfnAllClear</a> from lcddriver.o(.text) referenced 2 times from lcddriver.o(.data)
 <LI><a href="#[26]">MemManage_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[68]">MstModUpdate</a> from menu.o(.text) referenced from menu.o(.constdata)
 <LI><a href="#[24]">NMI_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[64]">OSTaskSwHook</a> from os_cpu_c.o(.text) referenced from os_cpu_a.o(.text)
 <LI><a href="#[63]">OSTmr_Task</a> from os_tmr.o(.text) referenced from os_tmr.o(.text)
 <LI><a href="#[248]">OS_TaskIdle</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[245]">OS_TaskStat</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[2e]">PVD_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2b]">PendSV_Handler</a> from os_cpu_a.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[32]">RCC_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[56]">RTCAlarm_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[30]">RTC_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[23]">Reset_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[50]">SPI1_IRQHandler</a> from spi.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[51]">SPI2_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[29]">SVC_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[62]">SlaveResume</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[2c]">SysTick_Handler</a> from main.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2f]">TAMPER_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[45]">TIM1_BRK_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[48]">TIM1_CC_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[47]">TIM1_TRG_COM_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[46]">TIM1_UP_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[49]">TIM2_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[4a]">TIM3_IRQHandler</a> from timer.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[4b]">TIM4_IRQHandler</a> from timer.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[186]">TaskCmdSend</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[5a]">TaskKeyScan</a> from keyproc.o(.text) referenced from main.o(.text)
 <LI><a href="#[165]">TaskMonitor</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[5c]">TaskMotoProc</a> from moto.o(.text) referenced from main.o(.text)
 <LI><a href="#[188]">TaskStart</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[5b]">TaskVoltageCheck</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[52]">USART1_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[53]">USART2_IRQHandler</a> from usart.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[54]">USART3_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[57]">USBWakeUp_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[40]">USB_HP_CAN_TX_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[41]">USB_LP_CAN_RX0_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[28]">UsageFault_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2d]">WWDG_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[59]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from stm32f10x.o(.text)
 <LI><a href="#[58]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[59]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(.text)
</UL>
<P><STRONG><a name="[2b1]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[69]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2b0]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2b2]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2b3]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2b4]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2b5]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[2b6]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1af]"></a>WFI_SET</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_StopMode
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Standby
</UL>

<P><STRONG><a name="[2b7]"></a>INTX_DISABLE</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys.o(.emb_text), UNUSED)

<P><STRONG><a name="[2b8]"></a>INTX_ENABLE</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys.o(.emb_text), UNUSED)

<P><STRONG><a name="[2b9]"></a>MSR_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(.emb_text), UNUSED)

<P><STRONG><a name="[23]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMAChannel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMAChannel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMAChannel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMAChannel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMAChannel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMAChannel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMAChannel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USB_HP_CAN_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USB_LP_CAN_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>ClearWlcBuf</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[12a]"></a>HpExpCalc</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HpExpCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInResMode
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot
</UL>

<P><STRONG><a name="[6d]"></a>HwTriger</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HwTriger &rArr; HP_SHOT_ONCE &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HP_SHOT_ONCE
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HighSpeedTriger
</UL>

<P><STRONG><a name="[6f]"></a>CalcCmpPower</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CalcCmpPower &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPreFlashDA
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HighSpeedTriger
</UL>

<P><STRONG><a name="[72]"></a>IIcDelay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hp_IIcStart
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hp_IicSendByte
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hp_IIcAck
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hp_IIcStop
</UL>

<P><STRONG><a name="[71]"></a>hp_IIcStop</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hp_IIcStop
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIcDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HpExpCodeSend
</UL>

<P><STRONG><a name="[73]"></a>hp_IIcAck</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hp_IIcAck
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIcDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hp_IicSendByte
</UL>

<P><STRONG><a name="[74]"></a>hp_IicSendByte</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hp_IicSendByte &rArr; hp_IIcAck
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hp_IIcAck
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIcDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HpExpCodeSend
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HpIicSendByte
</UL>

<P><STRONG><a name="[75]"></a>HpIicSendByte</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hp_IicSendByte
</UL>

<P><STRONG><a name="[76]"></a>hp_IIcStart</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hp_IIcStart
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIcDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HpExpCodeSend
</UL>

<P><STRONG><a name="[77]"></a>HpExpCodeSend</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HpExpCodeSend &rArr; hp_IicSendByte &rArr; hp_IIcAck
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hp_IIcStart
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hp_IicSendByte
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hp_IIcStop
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPreFlashDA
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtaModSet
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLM_SendChanhead
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlmCmdSet
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlmFlaADSet
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtmModSet
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HighSpeedTriger
</UL>

<P><STRONG><a name="[78]"></a>HighSpeedTriger</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HighSpeedTriger &rArr; HwTriger &rArr; HP_SHOT_ONCE &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HpExpCodeSend
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCmpPower
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwTriger
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInResMode
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot
</UL>

<P><STRONG><a name="[7c]"></a>LightSlaveParaClear</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LightSlaveParaClear &rArr; TmCaptureInit &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmCaptureInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCapture
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepTimerProc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveResume
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuncModuleSw
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveTtlPilot
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveTmrProc
</UL>

<P><STRONG><a name="[7f]"></a>UnexpectHandle</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UnexpectHandle &rArr; TmCaptureInit &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmCaptureInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCapture
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMstCmd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveTtlPreFlash
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveTtl
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveMulti
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveManu
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveTtlPilot
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveProc
</UL>

<P><STRONG><a name="[80]"></a>LightSlaveProc</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = LightSlaveProc &rArr; UnexpectHandle &rArr; TmCaptureInit &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnexpectHandle
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[2ba]"></a>WlmCodeExtract</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[2bb]"></a>WlmCodeExcludeNone</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>CodeSearch</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CodeSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveMulti
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveManu
</UL>

<P><STRONG><a name="[88]"></a>IndexToOutput</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IndexToOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveManu
</UL>

<P><STRONG><a name="[8a]"></a>WlMultiFrqConver</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveMulti
</UL>

<P><STRONG><a name="[8b]"></a>WlMultiTimeConver</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveMulti
</UL>

<P><STRONG><a name="[8e]"></a>CanExposeTimeCal</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CanExposeTimeCal
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveTtl
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashHandle
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSlaveFlashCalc
</UL>

<P><STRONG><a name="[5e]"></a>LightSlaveTmrProc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = LightSlaveTmrProc &rArr; LightSlaveParaClear &rArr; TmCaptureInit &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveParaClear
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlavePilot
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>LightSlaveTtlPilot</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LightSlaveTtlPilot &rArr; UnexpectHandle &rArr; TmCaptureInit &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnexpectHandle
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveParaClear
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMstCmd
</UL>

<P><STRONG><a name="[83]"></a>SetFlashTimeOut</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = SetFlashTimeOut &rArr; OSTmrStart &rArr; OSTmr_Lock &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrReload
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspUpdate
</UL>

<P><STRONG><a name="[86]"></a>LightSlaveManu</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LightSlaveManu &rArr; UnexpectHandle &rArr; TmCaptureInit &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndexToOutput
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeSearch
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnexpectHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMstCmd
</UL>

<P><STRONG><a name="[89]"></a>LightSlaveMulti</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LightSlaveMulti &rArr; UnexpectHandle &rArr; TmCaptureInit &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlMultiTimeConver
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlMultiFrqConver
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeSearch
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnexpectHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMstCmd
</UL>

<P><STRONG><a name="[8c]"></a>LightSlavePilot</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveTmrProc
</UL>

<P><STRONG><a name="[8d]"></a>LightSlaveTtl</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LightSlaveTtl &rArr; UnexpectHandle &rArr; TmCaptureInit &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanExposeTimeCal
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnexpectHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMstCmd
</UL>

<P><STRONG><a name="[8f]"></a>LightSlaveTtlPreFlash</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = LightSlaveTtlPreFlash &rArr; UnexpectHandle &rArr; TmCaptureInit &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnexpectHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMstCmd
</UL>

<P><STRONG><a name="[90]"></a>ParseMstCmd</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ParseMstCmd &rArr; LightSlaveTtlPilot &rArr; UnexpectHandle &rArr; TmCaptureInit &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveTtlPreFlash
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveTtl
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveMulti
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveManu
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveTtlPilot
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnexpectHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[125]"></a>CanOutputSwitch</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveMultiFlash
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeMultiFlash
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInResMode
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TtlTestProc
</UL>

<P><STRONG><a name="[91]"></a>LayoutClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, funclayout.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClearFeild
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LayModeClear
</UL>

<P><STRONG><a name="[93]"></a>LayModeClear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funclayout.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LayoutClear
</UL>

<P><STRONG><a name="[94]"></a>LayModeEttl</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, funclayout.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LayModeEttl &rArr; LcdLoadPicture &rArr; DisplayPicture &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdLoadPicture
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTtlScr
</UL>

<P><STRONG><a name="[96]"></a>LayModeManu</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, funclayout.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LayModeManu &rArr; LcdLoadPicture &rArr; DisplayPicture &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdLoadPicture
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetManuScr
</UL>

<P><STRONG><a name="[97]"></a>LayModeMulti</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, funclayout.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LayModeMulti &rArr; LcdLoadPicture &rArr; DisplayPicture &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdLoadPicture
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiScr
</UL>

<P><STRONG><a name="[98]"></a>LayModeGr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, funclayout.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LayModeGr &rArr; LcdLoadPicture &rArr; DisplayPicture &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdLoadPicture
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRfGrScr
</UL>

<P><STRONG><a name="[99]"></a>LayModeExtA</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, funclayout.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LayModeExtA &rArr; LcdLoadPicture &rArr; DisplayPicture &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdLoadPicture
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtaScr
</UL>

<P><STRONG><a name="[9a]"></a>LayModeExtM</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, funclayout.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LayModeExtM &rArr; LcdLoadPicture &rArr; DisplayPicture &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdLoadPicture
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtmScr
</UL>

<P><STRONG><a name="[9c]"></a>Adc_Init</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, keyadc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownProc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyAdcEnable
</UL>

<P><STRONG><a name="[9b]"></a>KeyAdcEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, keyadc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSlaveSleepScr
</UL>

<P><STRONG><a name="[9d]"></a>KeyAdcDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, keyadc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KeyAdcDisable &rArr; ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPow_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSlaveSleepScr
</UL>

<P><STRONG><a name="[a7]"></a>GetKeyAdc</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, keyadc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
</UL>

<P><STRONG><a name="[149]"></a>GetBatteryAdc</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, keyadc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIdleFlash
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBattery
</UL>

<P><STRONG><a name="[55]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, keyadc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI15_10_IRQHandler &rArr; Ex_NVIC_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Enable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Disable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Config
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>KeyValid</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, keyproc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
</UL>

<P><STRONG><a name="[a9]"></a>KeyReArmed</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, keyproc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
</UL>

<P><STRONG><a name="[a4]"></a>ReadPilot</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ReadPilot &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
</UL>

<P><STRONG><a name="[a6]"></a>ReadKey</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ReadKey &rArr; ReadPilot &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPilot
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyReArmed
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyValid
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyAdc
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
</UL>

<P><STRONG><a name="[aa]"></a>DspCmpIcon</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, keyproc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaSet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[ae]"></a>DspFebIcon</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, keyproc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaSet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[af]"></a>SetCmpFeb</STRONG> (Thumb, 816 bytes, Stack size 48 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SetCmpFeb &rArr; LoadCmpFebData &rArr; LoadCmpFebChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamLoadPicture
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadMaskData
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCmpFebData
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCmpFebChar
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaSet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRfGrScr
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtaScr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTtlScr
</UL>

<P><STRONG><a name="[b4]"></a>SetManuPara</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SetManuPara &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMstOtp_canStyle
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FiberAdjustProc
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetManuScr
</UL>

<P><STRONG><a name="[b6]"></a>SetRmtPara</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, keyproc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRmtF2
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRmtF1
</UL>

<P><STRONG><a name="[b8]"></a>SetMultiLink</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SetMultiLink &rArr; LcdCopyToRam &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCopyToRam
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiTmFrq
</UL>

<P><STRONG><a name="[bb]"></a>DspMultiHz</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DspMultiHz &rArr; LcdCopyToRam &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadMenuChar
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCopyToRam
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiTmFrq
</UL>

<P><STRONG><a name="[bd]"></a>MultiDspNum</STRONG> (Thumb, 382 bytes, Stack size 56 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MultiDspNum &rArr; LcdCopyToRam &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCopyToRam
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiTmFrq
</UL>

<P><STRONG><a name="[be]"></a>SetMultiTmFrq</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SetMultiTmFrq &rArr; MultiDspNum &rArr; LcdCopyToRam &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiDspNum
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMultiHz
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiLink
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspRfSlavePara
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLightSlavePara
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiFrqShift
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTimesShift
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfArrParaSubAdd
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiScr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiPara
</UL>

<P><STRONG><a name="[bf]"></a>SetMultiPara</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SetMultiPara &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMstOtp_canStyle
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiTmFrq
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiScr
</UL>

<P><STRONG><a name="[c0]"></a>CanSynMode</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CanSynMode &rArr; DisplayPicture &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPicture
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClearFeild
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynModShift
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRfGrScr
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetManuScr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTtlScr
</UL>

<P><STRONG><a name="[c2]"></a>SetTtlScr</STRONG> (Thumb, 1396 bytes, Stack size 96 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMstChan
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLinkshotChan
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspRfSlavePara
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLightSlavePara
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTtlCmp_canStyle
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPicture
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCanMstHead
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSynMode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmpFeb
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LayModeEttl
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModPasteScr
</UL>

<P><STRONG><a name="[c9]"></a>SetManuScr</STRONG> (Thumb, 770 bytes, Stack size 48 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SetManuScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMstChan
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLinkshotChan
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspRfSlavePara
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLightSlavePara
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspIndividualSlavePara
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPicture
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCanMstHead
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSynMode
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetManuPara
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LayModeManu
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModPasteScr
</UL>

<P><STRONG><a name="[cb]"></a>SetMultiScr</STRONG> (Thumb, 684 bytes, Stack size 48 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SetMultiScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMstChan
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLinkshotChan
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspRfSlavePara
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLightSlavePara
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspIndividualSlavePara
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPicture
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCanMstHead
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiPara
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiTmFrq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LayModeMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModPasteScr
</UL>

<P><STRONG><a name="[cc]"></a>SetExtaScr</STRONG> (Thumb, 460 bytes, Stack size 88 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SetExtaScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMstChan
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLinkshotChan
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspRfSlavePara
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTtlCmp_canStyle
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPicture
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmpFeb
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LayModeExtA
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModPasteScr
</UL>

<P><STRONG><a name="[cd]"></a>SetExtmScr</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SetExtmScr &rArr; DrawScale &rArr; DrawScopeNum &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLinkshotChan
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspIsoValue
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspApertValue
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawScale
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPicture
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdLoadPicture
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LayModeExtM
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModPasteScr
</UL>

<P><STRONG><a name="[d1]"></a>GrDrawSelBar</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GrDrawSelBar &rArr; LcdCopyToRam &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCopyToRam
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnGrParaRes
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfGrModSubAdd
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnGrSel
</UL>

<P><STRONG><a name="[d2]"></a>GrDspPara</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GrDspPara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTtlCmp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMstOtp
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClearFeild
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfGrDspPara
</UL>

<P><STRONG><a name="[d5]"></a>GrDspHead</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = GrDspHead &rArr; DspMstRatioHead &rArr; DisplayTitleChar &rArr; TitleGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMstRatioHead
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspGrMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfGrDspPara
</UL>

<P><STRONG><a name="[d8]"></a>RfGrDspPara</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = RfGrDspPara &rArr; GrDspPara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrDspHead
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrDspPara
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnGrParaRes
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfGrParaSubAdd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfGrModSubAdd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRfGrScr
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnGrSel
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnGrModRes
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnGrOnOff
</UL>

<P><STRONG><a name="[d9]"></a>SetRfGrScr</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SetRfGrScr &rArr; RfGrDspPara &rArr; GrDspPara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMstChan
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPicture
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfGrDspPara
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSynMode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmpFeb
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClearFeild
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LayModeGr
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModPasteScr
</UL>

<P><STRONG><a name="[da]"></a>SetRmtC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, keyproc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRmt
</UL>

<P><STRONG><a name="[dc]"></a>SetRmtF1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, keyproc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRmtPara
</UL>

<P><STRONG><a name="[dd]"></a>SetRmtF2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, keyproc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRmtPara
</UL>

<P><STRONG><a name="[de]"></a>KeyMenuSw</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = KeyMenuSw &rArr; InsertList &rArr; DisplayButton &rArr; LoadMenuChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertList
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfgrSelMenu
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfArrSelMenu
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FiberAdjustProc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterPfnSubMenu
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCfnSubMenu
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspPfnMenu
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspCfnMenu
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnGrParaRes
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadButtons
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnRatio
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCfnAllClear
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildLinkedShotMenu
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnChScan
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnMemory
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnIdSel
</UL>

<P><STRONG><a name="[e0]"></a>LoadButtons</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = LoadButtons &rArr; KeyMenuSw &rArr; InsertList &rArr; DisplayButton &rArr; LoadMenuChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildFuncMenu
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMenuSw
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserScreenOn
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode
</UL>

<P><STRONG><a name="[e2]"></a>DspMenuIcon</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DspMenuIcon &rArr; LcdCopyToRam &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCopyToRam
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeClear
</UL>

<P><STRONG><a name="[e4]"></a>ModPasteScr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRfGrScr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtmScr
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtaScr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiScr
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetManuScr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTtlScr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyOk
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnGrSel
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnArrParaRes
</UL>

<P><STRONG><a name="[e5]"></a>FuncModuleSw</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = FuncModuleSw &rArr; BkLiteOn &rArr; OSTmrStart &rArr; OSTmr_Lock &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BkLiteOn
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmCaptureInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCapture
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveParaClear
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MstModCheck
</UL>

<P><STRONG><a name="[e7]"></a>UartIntSet</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UartIntSet &rArr; WaitForUartIdle &rArr; uart2_init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForUartIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MstModCheck
</UL>

<P><STRONG><a name="[e9]"></a>ModLinkedShot</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ModLinkedShot &rArr; SetMstChan &rArr; LcdCopyToRam &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMstChan
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamLoadPicture
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadPfnString
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCopyToRam
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspClearAllPara
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaScroll
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode
</UL>

<P><STRONG><a name="[ed]"></a>RfDevLinkMark</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RfDevLinkMark &rArr; DisplayPicture &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPicture
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClearFeild
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspUpdate
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyOk
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChanSetConfirm
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode
</UL>

<P><STRONG><a name="[ee]"></a>Mode</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = Mode &rArr; ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOnChargeLed
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeOnCharge
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuncDsp
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMstModIcon
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspClearAllPara
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDevLinkMark
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModLinkedShot
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModPasteScr
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadButtons
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClearFeild
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserScreenOn
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownProc
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspUpdate
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyToLinkMod
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MstModCheck
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyOk
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwithMode
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeClear
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnZoon
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnGrSel
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnRatio
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnTtlFeb
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnAddSub
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnMemory
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnChSet
</UL>

<P><STRONG><a name="[f3]"></a>ModeClear</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = ModeClear &rArr; Mode &rArr; ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMenuIcon
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
</UL>

<P><STRONG><a name="[2bc]"></a>SelectMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyproc.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>SwithMode</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = SwithMode &rArr; Mode &rArr; ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
</UL>

<P><STRONG><a name="[f8]"></a>MultiMaxTimes</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MultiMaxTimes
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiFrqShift
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTimesShift
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfArrParaSubAdd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExposeAddSub
</UL>

<P><STRONG><a name="[f5]"></a>MotoShift</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MotoShift &rArr; DisplayFocLen &rArr; DisplayPicture &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFocLen
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySubAdd
</UL>

<P><STRONG><a name="[f7]"></a>ExposeAddSub</STRONG> (Thumb, 376 bytes, Stack size 20 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ExposeAddSub &rArr; MultiMaxTimes
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiMaxTimes
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySubAdd
</UL>

<P><STRONG><a name="[f9]"></a>SynModShift</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SynModShift &rArr; CanSynMode &rArr; DisplayPicture &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSynMode
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySubAdd
</UL>

<P><STRONG><a name="[11a]"></a>TtlFebAddSub</STRONG> (Thumb, 148 bytes, Stack size 12 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TtlFebAddSub
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySubAdd
</UL>

<P><STRONG><a name="[fa]"></a>RatioSubAdd</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = RatioSubAdd &rArr; DisplayCanMstHead &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCanMstHead
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySubAdd
</UL>

<P><STRONG><a name="[fb]"></a>Arr_SubAdd</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Arr_SubAdd &rArr; DisplayCanMstHead &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfArrSelMenu
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCanMstHead
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySubAdd
</UL>

<P><STRONG><a name="[fd]"></a>RfArrParaSubAdd</STRONG> (Thumb, 778 bytes, Stack size 40 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = RfArrParaSubAdd &rArr; DisplayCanMstHead &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCanMstHead
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiMaxTimes
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiTmFrq
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySubAdd
</UL>

<P><STRONG><a name="[fe]"></a>ChSanSubAdd</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ChSanSubAdd &rArr; SetMstChan &rArr; LcdCopyToRam &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMstChan
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCopyToRam
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySubAdd
</UL>

<P><STRONG><a name="[ff]"></a>LightChanSet</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LightChanSet &rArr; SetMstChan &rArr; LcdCopyToRam &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMstChan
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySubAdd
</UL>

<P><STRONG><a name="[100]"></a>RfChanSet</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RfChanSet &rArr; SetMstChan &rArr; LcdCopyToRam &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMstChan
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLinkshotChan
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySubAdd
</UL>

<P><STRONG><a name="[101]"></a>TtlDebugDspDat</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, keyproc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCopyToRam
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2bd]"></a>MulTiDspFrq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyproc.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>MultiTimesShift</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MultiTimesShift &rArr; SetMultiTmFrq &rArr; MultiDspNum &rArr; LcdCopyToRam &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiMaxTimes
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiTmFrq
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySubAdd
</UL>

<P><STRONG><a name="[103]"></a>MultiFrqShift</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MultiFrqShift &rArr; SetMultiTmFrq &rArr; MultiDspNum &rArr; LcdCopyToRam &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiMaxTimes
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiTmFrq
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySubAdd
</UL>

<P><STRONG><a name="[104]"></a>IdSelSubAdd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = IdSelSubAdd &rArr; DspID &rArr; LcdLoadPicture &rArr; DisplayPicture &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspID
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySubAdd
</UL>

<P><STRONG><a name="[106]"></a>IdSetSubAdd</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = IdSetSubAdd &rArr; DspID &rArr; LcdLoadPicture &rArr; DisplayPicture &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspID
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySubAdd
</UL>

<P><STRONG><a name="[107]"></a>RfGrModSubAdd</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = RfGrModSubAdd &rArr; RfGrDspPara &rArr; GrDspPara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfgrSelMenu
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfGrDspPara
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrDrawSelBar
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySubAdd
</UL>

<P><STRONG><a name="[109]"></a>RfGrParaSubAdd</STRONG> (Thumb, 568 bytes, Stack size 24 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = RfGrParaSubAdd &rArr; RfGrDspPara &rArr; GrDspPara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfGrDspPara
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySubAdd
</UL>

<P><STRONG><a name="[10a]"></a>SnrMenuSubAdd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SnrMenuSubAdd &rArr; DspCfnMenu &rArr; KeyMenuSw &rArr; InsertList &rArr; DisplayButton &rArr; LoadMenuChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspCfnMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySubAdd
</UL>

<P><STRONG><a name="[10c]"></a>PfnMenuSubAdd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = PfnMenuSubAdd &rArr; DspPfnMenu &rArr; KeyMenuSw &rArr; InsertList &rArr; DisplayButton &rArr; LoadMenuChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspPfnMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySubAdd
</UL>

<P><STRONG><a name="[10e]"></a>SnrSubMenu</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = SnrSubMenu &rArr; EnterCfnSubMenu &rArr; KeyMenuSw &rArr; InsertList &rArr; DisplayButton &rArr; LoadMenuChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCfnSubMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySubAdd
</UL>

<P><STRONG><a name="[110]"></a>PfnSubMenu</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = PfnSubMenu &rArr; EnterPfnSubMenu &rArr; KeyMenuSw &rArr; InsertList &rArr; DisplayButton &rArr; LoadMenuChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterPfnSubMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySubAdd
</UL>

<P><STRONG><a name="[115]"></a>ExtmIsoIndex</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, keyproc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtmModSet
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtmIsoSubAdd
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAvailScaleEx
</UL>

<P><STRONG><a name="[113]"></a>ExtmApertIndex</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, keyproc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtmModSet
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtmApertSubAdd
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAvailScaleEx
</UL>

<P><STRONG><a name="[112]"></a>ExtmApertSubAdd</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ExtmApertSubAdd &rArr; DrawScale &rArr; DrawScopeNum &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspApertValue
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawScale
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtmApertIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySubAdd
</UL>

<P><STRONG><a name="[114]"></a>ExtmIsoSubAdd</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ExtmIsoSubAdd &rArr; DrawScale &rArr; DrawScopeNum &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspIsoValue
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawScale
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtmIsoIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySubAdd
</UL>

<P><STRONG><a name="[116]"></a>FbAdjSubAdd</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = FbAdjSubAdd &rArr; FiberAdjustProc &rArr; DisplayTtlCmp &rArr; DisplayTtlCmp_canStyle &rArr; DisplayCanCmpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FiberAdjustProc
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySubAdd
</UL>

<P><STRONG><a name="[118]"></a>FbExpSubAdd</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = FbExpSubAdd &rArr; FiberAdjustProc &rArr; DisplayTtlCmp &rArr; DisplayTtlCmp_canStyle &rArr; DisplayCanCmpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FiberAdjustProc
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySubAdd
</UL>

<P><STRONG><a name="[119]"></a>KeySubAdd</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = KeySubAdd &rArr; RfGrParaSubAdd &rArr; RfGrDspPara &rArr; GrDspPara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FbExpSubAdd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FbAdjSubAdd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtmIsoSubAdd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtmApertSubAdd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PfnSubMenu
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrSubMenu
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PfnMenuSubAdd
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrMenuSubAdd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfGrParaSubAdd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfGrModSubAdd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdSetSubAdd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdSelSubAdd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiFrqShift
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTimesShift
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfChanSet
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightChanSet
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChSanSubAdd
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfArrParaSubAdd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arr_SubAdd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RatioSubAdd
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TtlFebAddSub
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynModShift
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExposeAddSub
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotoShift
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
</UL>

<P><STRONG><a name="[11b]"></a>ChanSetConfirm</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = ChanSetConfirm &rArr; SavePara &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; STMFLASH_WriteHalfWord &rArr; STMFLASH_WaitDone &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSctSend
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMstChan
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLinkshotChan
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePara
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDevLinkMark
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BkLiteAutoOff
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsModSwitchValid
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyOk
</UL>

<P><STRONG><a name="[11e]"></a>KeyOk</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = KeyOk &rArr; Mode &rArr; ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSctSend
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfArrSelMenu
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterPfnSubMenu
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCfnSubMenu
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspID
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspClearAllPara
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCanMstHead
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnSnrMenu
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnPfnMenu
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnGrParaRes
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChanSetConfirm
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDevLinkMark
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModPasteScr
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMotoSet
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnChScan
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnSave
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnHome
</UL>

<P><STRONG><a name="[11f]"></a>KeyMotoSet</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, keyproc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFocLen
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyOk
</UL>

<P><STRONG><a name="[13c]"></a>ModeSw</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ModeSw
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
</UL>

<P><STRONG><a name="[120]"></a>RfMoudleSet</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = RfMoudleSet &rArr; UartSctSend &rArr; TrigerUartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSctSend
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserScreenOn
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownProc
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspUpdate
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyToLinkMod
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MstModCheck
</UL>

<P><STRONG><a name="[122]"></a>MstModCheck</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = MstModCheck &rArr; Mode &rArr; ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMoudleSet
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIntSet
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuncModuleSw
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
</UL>

<P><STRONG><a name="[123]"></a>KeyToLinkMod</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = KeyToLinkMod &rArr; Mode &rArr; ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BkLiteOn
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMoudleSet
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
</UL>

<P><STRONG><a name="[124]"></a>TtlTestProc</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = TtlTestProc &rArr; TURN_ON_TRIGER &rArr; WLM_SHOT_ONCE &rArr; FlashBaseFiber &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlmFlaADSet
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TURN_ON_TRIGER
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanOutputSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot
</UL>

<P><STRONG><a name="[129]"></a>Pilot</STRONG> (Thumb, 1402 bytes, Stack size 56 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Pilot &rArr; RfFlashConfirm &rArr; WaitForUartIdle &rArr; uart2_init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlmFlaADSet
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlmCmdOneShot
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLM_SendData
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSctSend
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TURN_ON_TRIGER
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCapture
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiFlashTimer
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFlashConfirm
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCountDownInfo
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiFlashPrepear
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInResMode
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtmModSet
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtModFlash
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildExposeCmd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TtlTestProc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCapture
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanOutputSwitch
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HighSpeedTriger
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HpExpCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspUpdate
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
</UL>

<P><STRONG><a name="[138]"></a>ResetKeyInt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, keyproc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Enable
</UL>

<P><STRONG><a name="[13b]"></a>ModeFuncJudge</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, keyproc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
</UL>

<P><STRONG><a name="[139]"></a>IsModSwitchValid</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = IsModSwitchValid &rArr; ChanSetConfirm &rArr; SavePara &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; STMFLASH_WriteHalfWord &rArr; STMFLASH_WaitDone &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChanSetConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BkLiteAutoOff
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
</UL>

<P><STRONG><a name="[13a]"></a>KeyProcess</STRONG> (Thumb, 592 bytes, Stack size 24 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = KeyProcess &rArr; KeyOk &rArr; Mode &rArr; ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePara
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FiberAdjustProc
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BkLiteOn
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsModSwitchValid
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeFuncJudge
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyToLinkMod
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MstModCheck
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeSw
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyOk
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySubAdd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwithMode
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeClear
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMenuIcon
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadButtons
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Enable
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClearFeild
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveParaClear
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskKeyScan
</UL>

<P><STRONG><a name="[144]"></a>AfAutoCtrl</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, keyproc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskKeyScan
</UL>

<P><STRONG><a name="[13d]"></a>ChargeBuzzer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ChargeBuzzer &rArr; BUZZER_ON &rArr; OSTmrStart &rArr; OSTmr_Lock &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_ON
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOnChargeLed
</UL>

<P><STRONG><a name="[13f]"></a>ChkVoltage</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ChkVoltage &rArr; TurnOnChargeLed &rArr; ChargeBuzzer &rArr; BUZZER_ON &rArr; OSTmrStart &rArr; OSTmr_Lock &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_seconds
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOnChargeLed
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSTOPMode
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadLowBatIcon
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskVoltageCheck
</UL>

<P><STRONG><a name="[5a]"></a>TaskKeyScan</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = TaskKeyScan &rArr; KeyProcess &rArr; KeyOk &rArr; Mode &rArr; ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspUpdate
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfAutoCtrl
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, keyproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[146]"></a>Flash_Interrupt_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Flash_Interrupt_init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortInit
</UL>

<P><STRONG><a name="[148]"></a>CheckBattery</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CheckBattery &rArr; LoadLowBatIcon &rArr; DisplayPicture &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_seconds
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSTOPMode
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadLowBatIcon
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryAdc
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownProc
</UL>

<P><STRONG><a name="[14f]"></a>GolbalParaInit</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GolbalParaInit
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownProc
</UL>

<P><STRONG><a name="[62]"></a>SlaveResume</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SlaveResume &rArr; LightSlaveParaClear &rArr; TmCaptureInit &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmCaptureInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveParaClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>FlaOkAutoOff</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>CmrShutterPull</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[5f]"></a>BzOff</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BzOff &rArr; TmCaptureInit &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmCaptureInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCapture
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>BkLiteAutoOff</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = BkLiteAutoOff &rArr; IsModSwitchValid &rArr; ChanSetConfirm &rArr; SavePara &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; STMFLASH_WriteHalfWord &rArr; STMFLASH_WaitDone &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsModSwitchValid
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChanSetConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>TaskVoltageCheck</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = TaskVoltageCheck &rArr;  TaskVoltageCheck (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskVoltageCheck
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskVoltageCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[14b]"></a>PowerDownProc</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = PowerDownProc &rArr; Mode &rArr; ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortUninit
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortInit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotoReset
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPow_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GolbalParaInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBattery
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSctSend
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMoudleSet
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMonitor
</UL>

<P><STRONG><a name="[153]"></a>DspSlaveSleepScr</STRONG> (Thumb, 418 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = DspSlaveSleepScr &rArr; Sleep_Init &rArr; Mode &rArr; ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSleepWakeIntSet
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSleepWakeIntClear
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIx_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawFrame
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPicture
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Enable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Disable
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyAdcDisable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyAdcEnable
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCapture
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepTimerProc
</UL>

<P><STRONG><a name="[15a]"></a>SleepTimerProc</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = SleepTimerProc &rArr; DspSlaveSleepScr &rArr; Sleep_Init &rArr; Mode &rArr; ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSlaveSleepScr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSctSend
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmCaptureInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveParaClear
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMonitor
</UL>

<P><STRONG><a name="[167]"></a>LightSlaveToggle</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LightSlaveToggle
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMonitor
</UL>

<P><STRONG><a name="[15f]"></a>CalcRgbFilterStyle</STRONG> (Thumb, 668 bytes, Stack size 36 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CalcRgbFilterStyle
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RgbCheckProc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMonitor
</UL>

<P><STRONG><a name="[15b]"></a>SensorMonitor</STRONG> (Thumb, 468 bytes, Stack size 96 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = SensorMonitor &rArr; Rgb_ReadChan &rArr; BH1745_ReadChan &rArr; Rgb_IIC_ReadWord &rArr; RGB_IicSendByte &rArr; RGB_IIcAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopRgbSample
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRgbSample
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rgb_ReadChan
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRgbCvtState
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRgbFilterStyle
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMonitor
</UL>

<P><STRONG><a name="[161]"></a>RgbCheckProc</STRONG> (Thumb, 424 bytes, Stack size 88 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = RgbCheckProc &rArr; FiberAdjustProc &rArr; DisplayTtlCmp &rArr; DisplayTtlCmp_canStyle &rArr; DisplayCanCmpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopRgbSample
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRgbSample
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rgb_ReadChan
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRgbCvtState
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRgbFilterStyle
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePara
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FiberAdjustProc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMonitor
</UL>

<P><STRONG><a name="[e6]"></a>BkLiteOn</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = BkLiteOn &rArr; OSTmrStart &rArr; OSTmr_Lock &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempCheck
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTimesCheck
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyToLinkMod
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuncModuleSw
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BkLiteSelect
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BkLiteSw
</UL>

<P><STRONG><a name="[162]"></a>FlashTimesCheck</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = FlashTimesCheck &rArr; BkLiteOn &rArr; OSTmrStart &rArr; OSTmr_Lock &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BkLiteOn
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempMonitorProc
</UL>

<P><STRONG><a name="[163]"></a>TempCheck</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = TempCheck &rArr; BkLiteOn &rArr; OSTmrStart &rArr; OSTmr_Lock &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BkLiteOn
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempMonitorProc
</UL>

<P><STRONG><a name="[164]"></a>TempMonitorProc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = TempMonitorProc &rArr; TempCheck &rArr; BkLiteOn &rArr; OSTmrStart &rArr; OSTmr_Lock &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempCheck
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTimesCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMonitor
</UL>

<P><STRONG><a name="[165]"></a>TaskMonitor</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = TaskMonitor &rArr; SleepTimerProc &rArr; DspSlaveSleepScr &rArr; Sleep_Init &rArr; Mode &rArr; ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotoLocation
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempMonitorProc
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RgbCheckProc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMonitor
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveToggle
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepTimerProc
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownProc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[17f]"></a>StopMultiFlash</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
</UL>

<P><STRONG><a name="[127]"></a>TURN_ON_TRIGER</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = TURN_ON_TRIGER &rArr; WLM_SHOT_ONCE &rArr; FlashBaseFiber &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLM_SHOT_ONCE
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveMultiFlash
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakePreflash
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeMultiFlash
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInResMode
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TtlTestProc
</UL>

<P><STRONG><a name="[126]"></a>WlmFlaADSet</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WlmFlaADSet &rArr; HpExpCodeSend &rArr; hp_IicSendByte &rArr; hp_IIcAck
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HpExpCodeSend
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveMultiFlash
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakePreflash
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeMultiFlash
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInResMode
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TtlTestProc
</UL>

<P><STRONG><a name="[169]"></a>TakeMultiFlash</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = TakeMultiFlash &rArr; TURN_ON_TRIGER &rArr; WLM_SHOT_ONCE &rArr; FlashBaseFiber &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlmFlaADSet
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TURN_ON_TRIGER
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanOutputSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
</UL>

<P><STRONG><a name="[16b]"></a>FlashOkLedTwinkle</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = FlashOkLedTwinkle &rArr; OSTmrStart &rArr; OSTmr_Lock &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeFlash
</UL>

<P><STRONG><a name="[135]"></a>SetMultiFlashTimer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetMultiFlashTimer &rArr; Timer4_Init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInResMode
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot
</UL>

<P><STRONG><a name="[134]"></a>FlashInResMode</STRONG> (Thumb, 314 bytes, Stack size 56 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FlashInResMode &rArr; HighSpeedTriger &rArr; HwTriger &rArr; HP_SHOT_ONCE &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTLModFlash
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotoStdIndex
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtaModSet
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlmFlaADSet
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TURN_ON_TRIGER
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiFlashTimer
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtmModSet
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtModFlash
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanOutputSwitch
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HighSpeedTriger
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HpExpCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveFlash
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeFlash
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot
</UL>

<P><STRONG><a name="[171]"></a>TtlFebFlashUpdate</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeFlash
</UL>

<P><STRONG><a name="[16f]"></a>MultiZero</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveMultiFlashPrepear
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiFlashPrepear
</UL>

<P><STRONG><a name="[133]"></a>MultiFlashPrepear</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MultiFlashPrepear
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiZero
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeFlash
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot
</UL>

<P><STRONG><a name="[170]"></a>TakeFlash</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = TakeFlash &rArr; FlashInResMode &rArr; HighSpeedTriger &rArr; HwTriger &rArr; HP_SHOT_ONCE &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcodeCovert
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TtlFebFlashUpdate
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashOkLedTwinkle
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiFlashPrepear
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInResMode
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
</UL>

<P><STRONG><a name="[173]"></a>SlaveMultiFlashPrepear</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SlaveMultiFlashPrepear
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiZero
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveFlash
</UL>

<P><STRONG><a name="[174]"></a>LightSlaveFlash</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LightSlaveFlash &rArr; FlashInResMode &rArr; HighSpeedTriger &rArr; HwTriger &rArr; HP_SHOT_ONCE &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveMultiFlashPrepear
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInResMode
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
</UL>

<P><STRONG><a name="[184]"></a>RfSlaveMultiFlashPrepear</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
</UL>

<P><STRONG><a name="[175]"></a>TakePreflash</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = TakePreflash &rArr; TURN_ON_TRIGER &rArr; WLM_SHOT_ONCE &rArr; FlashBaseFiber &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlmFlaADSet
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TURN_ON_TRIGER
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
</UL>

<P><STRONG><a name="[176]"></a>FlashFinishProc</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FlashFinishProc &rArr; Ex_NVIC_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Disable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Enable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
</UL>

<P><STRONG><a name="[178]"></a>RfMstPreflaProc</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = RfMstPreflaProc &rArr; HpPreflash &rArr; TakePreFlash &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HpPreflash
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIx_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
</UL>

<P><STRONG><a name="[17a]"></a>WlmCmdSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HpExpCodeSend
</UL>

<P><STRONG><a name="[17b]"></a>WLM_SendChanhead</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = WLM_SendChanhead &rArr; WlmCmdHeadSend &rArr; WLM_HEAD_TRIGER &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlmCmdHeadSend
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlmCmdOneShot
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HpExpCodeSend
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLM_SendData
</UL>

<P><STRONG><a name="[12d]"></a>WLM_SendData</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = WLM_SendData &rArr; WLM_SendChanhead &rArr; WlmCmdHeadSend &rArr; WLM_HEAD_TRIGER &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLM_SendChanhead
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlmCmdOneShot
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot
</UL>

<P><STRONG><a name="[17d]"></a>WLMCmdSend</STRONG> (Thumb, 1834 bytes, Stack size 56 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = WLMCmdSend &rArr; RfFlashConfirm &rArr; WaitForUartIdle &rArr; uart2_init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U2SendData
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRearUp
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPreFlashDA
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Disable
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRecoverInfo
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfPreFlashInfo
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HpPreflash
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIx_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMstPreflaProc
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashFinishProc
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakePreflash
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSlaveMultiFlashPrepear
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveFlash
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeFlash
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeMultiFlash
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMultiFlash
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlmCmdOneShot
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLM_SendData
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSctSend
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCapture
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFlashConfirm
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCountDownInfo
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInResMode
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Enable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Config
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCapture
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveParaClear
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HpExpCodeSend
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCmdSend
</UL>

<P><STRONG><a name="[186]"></a>TaskCmdSend</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = TaskCmdSend &rArr; WLMCmdSend &rArr; RfFlashConfirm &rArr; WaitForUartIdle &rArr; uart2_init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[188]"></a>TaskStart</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = TaskStart &rArr; OSTmrCreate &rArr; OSTmr_Lock &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[18b]"></a>SysTick_Configuration</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Configuration &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18c]"></a>UserScreenOn</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = UserScreenOn &rArr; Mode &rArr; ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMoudleSet
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadButtons
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnLoad
</UL>

<P><STRONG><a name="[18d]"></a>UserInit</STRONG> (Thumb, 850 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UserInit &rArr; STMFLASH_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotoStdIndex
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiMaxTimes
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnLoad
</UL>

<P><STRONG><a name="[58]"></a>main</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = main &rArr; UserScreenOn &rArr; Mode &rArr; ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortInit
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotoReset
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPortInit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInit
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserScreenOn
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GolbalParaInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBattery
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[13e]"></a>BUZZER_ON</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = BUZZER_ON &rArr; OSTmrStart &rArr; OSTmr_Lock &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrReload
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeBuzzer
</UL>

<P><STRONG><a name="[2be]"></a>CmrParaReflash</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>RfParaSend</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = RfParaSend &rArr; TrigerUartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrigerUartSend
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUartSendBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRcvHandle
</UL>

<P><STRONG><a name="[2c]"></a>SysTick_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotoTickDriver
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[19b]"></a>RgbTest</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopRgbSample
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRgbSample
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rgb_ReadChan
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRgbCvtState
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>

<P><STRONG><a name="[19c]"></a>LightSlaveMultiFlash</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlmFlaADSet
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TURN_ON_TRIGER
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanOutputSwitch
</UL>

<P><STRONG><a name="[19d]"></a>ComIdleFlash</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ComIdleFlash &rArr; OSTaskResume &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryAdc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[37]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = EXTI4_IRQHandler &rArr; ComIdleFlash &rArr; OSTaskResume &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIdleFlash
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[f2]"></a>TurnOnChargeLed</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = TurnOnChargeLed &rArr; ChargeBuzzer &rArr; BUZZER_ON &rArr; OSTmrStart &rArr; OSTmr_Lock &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMasterReadySet
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeBuzzer
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkVoltage
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnGrOnOff
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnMstSw
</UL>

<P><STRONG><a name="[66]"></a>ContrastDsp</STRONG> (Thumb, 242 bytes, Stack size 20 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ContrastDsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[0]"></a>ContrastSet</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ContrastSet &rArr; LcdCopyToRam &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamLoadPicture
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCopyToRam
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaSet
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetContrast
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>MstModUpdate</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>BkLiteSw</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = BkLiteSw &rArr; BkLiteOn &rArr; OSTmrStart &rArr; OSTmr_Lock &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BkLiteOn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>BkLiteSelect</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = BkLiteSelect &rArr; BkLiteOn &rArr; OSTmrStart &rArr; OSTmr_Lock &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BkLiteOn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[1a1]"></a>CheckZmAdc</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, moto.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZoomAdc
</UL>

<P><STRONG><a name="[1a0]"></a>GetZoomAdc</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, moto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckZmAdc
</UL>

<P><STRONG><a name="[2bf]"></a>GetZoomByAdc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, moto.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>LockCharge</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, moto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotoReset
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotoLocation
</UL>

<P><STRONG><a name="[1a3]"></a>ReleaseCharge</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, moto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotoLocation
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotoProc
</UL>

<P><STRONG><a name="[239]"></a>SetChargeEnable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, moto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeOnCharge
</UL>

<P><STRONG><a name="[238]"></a>SetChargeDisable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, moto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeOnCharge
</UL>

<P><STRONG><a name="[152]"></a>MotoReset</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MotoReset
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCharge
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotoLocation
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownProc
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotoProc
</UL>

<P><STRONG><a name="[1a4]"></a>GetMotoIndex</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, moto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotoLocation
</UL>

<P><STRONG><a name="[166]"></a>MotoLocation</STRONG> (Thumb, 354 bytes, Stack size 32 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = MotoLocation &rArr; DisplayFocLen &rArr; DisplayPicture &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotoReset
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFocLen
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotoIndex
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseCharge
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCharge
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMonitor
</UL>

<P><STRONG><a name="[1a6]"></a>MotoDrvPinSet</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MotoDrvPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotoProc
</UL>

<P><STRONG><a name="[1a5]"></a>MotoProc</STRONG> (Thumb, 312 bytes, Stack size 28 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MotoProc &rArr; MotoReset
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotoReset
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotoDrvPinSet
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseCharge
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMotoProc
</UL>

<P><STRONG><a name="[5c]"></a>TaskMotoProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = TaskMotoProc &rArr; MotoProc &rArr; MotoReset
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotoProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[199]"></a>MotoTickDriver</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = MotoTickDriver &rArr; OSTaskResume &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[16d]"></a>GetMotoStdIndex</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, moto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInResMode
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAvailScaleEx
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAvailScaleHp
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAvailScale
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FoclenRefresh
</UL>

<P><STRONG><a name="[190]"></a>delay_init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[121]"></a>delay_ms</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortInit
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPortInit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSlaveSleepScr
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownProc
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBattery
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_seconds
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForUartIdle
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMoudleSet
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_test
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST75256_Init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1745_Init
</UL>

<P><STRONG><a name="[128]"></a>delay_us</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTLModFlash
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtaModSet
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIdleFlash
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLM_SendChanhead
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMstPreflaProc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlmFlaADSet
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLM_SendData
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TURN_ON_TRIGER
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtmModSet
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtModFlash
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TtlTestProc
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HP_SHOT_ONCE
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WaitDone
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBH1745
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_IicReadByte
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_IicSendByte
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_IIcStop
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_IIcStart
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_IIcAck
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakePreFlash
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashBaseFiber
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLM_HEAD_TRIGER
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLM_COMMAND_TRIGER
</UL>

<P><STRONG><a name="[1a7]"></a>WLM_COMMAND_TRIGER</STRONG> (Thumb, 148 bytes, Stack size 36 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WLM_COMMAND_TRIGER &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlmCmdOneShot
</UL>

<P><STRONG><a name="[1a8]"></a>WLM_HEAD_TRIGER</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = WLM_HEAD_TRIGER &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlmCmdHeadSend
</UL>

<P><STRONG><a name="[1a9]"></a>FlashBaseFiber</STRONG> (Thumb, 116 bytes, Stack size 36 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FlashBaseFiber &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLM_SHOT_ONCE
</UL>

<P><STRONG><a name="[12f]"></a>WlmCmdOneShot</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WlmCmdOneShot &rArr; WLM_COMMAND_TRIGER &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLM_COMMAND_TRIGER
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLM_SendChanhead
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLM_SendData
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot
</UL>

<P><STRONG><a name="[17c]"></a>WlmCmdHeadSend</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = WlmCmdHeadSend &rArr; WLM_HEAD_TRIGER &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLM_HEAD_TRIGER
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLM_SendChanhead
</UL>

<P><STRONG><a name="[168]"></a>WLM_SHOT_ONCE</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = WLM_SHOT_ONCE &rArr; FlashBaseFiber &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashBaseFiber
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TURN_ON_TRIGER
</UL>

<P><STRONG><a name="[6e]"></a>HP_SHOT_ONCE</STRONG> (Thumb, 114 bytes, Stack size 36 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HP_SHOT_ONCE &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwTriger
</UL>

<P><STRONG><a name="[1aa]"></a>TakePreFlash</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TakePreFlash &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HpPreflash
</UL>

<P><STRONG><a name="[137]"></a>ExtModFlash</STRONG> (Thumb, 184 bytes, Stack size 36 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ExtModFlash &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInResMode
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot
</UL>

<P><STRONG><a name="[16c]"></a>TTLModFlash</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TTLModFlash &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInResMode
</UL>

<P><STRONG><a name="[141]"></a>delay_seconds</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delay_seconds &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBattery
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkVoltage
</UL>

<P><STRONG><a name="[1ad]"></a>MY_NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYRCC_DeInit
</UL>

<P><STRONG><a name="[1ab]"></a>MY_NVIC_PriorityGroupConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>

<P><STRONG><a name="[147]"></a>MY_NVIC_Init</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSleepWakeIntSet
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortInit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIx_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Interrupt_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmCaptureInit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
</UL>

<P><STRONG><a name="[a2]"></a>Ex_NVIC_Config</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ex_NVIC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSleepWakeIntSet
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortInit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIx_Init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashFinishProc
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Interrupt_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlinkCmrHandle
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComResumeInt
</UL>

<P><STRONG><a name="[a3]"></a>Ex_NVIC_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortInit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashFinishProc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSlaveSleepScr
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetKeyInt
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlinkCmrHandle
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComResumeInt
</UL>

<P><STRONG><a name="[a0]"></a>Ex_NVIC_Disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSleepWakeIntClear
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortUninit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPow_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSlaveSleepScr
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadLowBatIcon
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[1ac]"></a>MYRCC_DeInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_SetVectorTable
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
</UL>

<P><STRONG><a name="[1ae]"></a>Sys_Standby</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WFI_SET
</UL>

<P><STRONG><a name="[1b0]"></a>Sys_StopMode</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WFI_SET
</UL>

<P><STRONG><a name="[1b1]"></a>RCC_Configuration</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_Configuration &rArr; RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPow_Init
</UL>

<P><STRONG><a name="[1c0]"></a>SetPwrOnExti</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SetPwrOnExti &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSleepWakeIntSet
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPow_Init
</UL>

<P><STRONG><a name="[14d]"></a>LowPow_Init</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LowPow_Init &rArr; SetPwrOnExti &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSTOPMode
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Disable
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyAdcDisable
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPwrOnExti
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownProc
</UL>

<P><STRONG><a name="[1cb]"></a>SleepPortUninit</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SleepPortUninit &rArr; PortUninit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortUninit
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Init
</UL>

<P><STRONG><a name="[1cc]"></a>SleepWakeIntSet</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SleepWakeIntSet &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Init
</UL>

<P><STRONG><a name="[155]"></a>SlaveSleepWakeIntSet</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SlaveSleepWakeIntSet &rArr; SetPwrOnExti &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Config
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPwrOnExti
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSlaveSleepScr
</UL>

<P><STRONG><a name="[157]"></a>SlaveSleepWakeIntClear</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SlaveSleepWakeIntClear
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSlaveSleepScr
</UL>

<P><STRONG><a name="[1ce]"></a>SleepPortInit</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SleepPortInit
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Init
</UL>

<P><STRONG><a name="[156]"></a>Sleep_Init</STRONG> (Thumb, 390 bytes, Stack size 88 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Sleep_Init &rArr; Mode &rArr; ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIx_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSTOPMode
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMoudleSet
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Enable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Disable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Config
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyAdcDisable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyAdcEnable
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOff
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepPortInit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepWakeIntSet
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepPortUninit
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPwrOnExti
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepTimerProc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSlaveSleepScr
</UL>

<P><STRONG><a name="[33]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2c0]"></a>Sys_Soft_Reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>JTAG_Set</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortInit
</UL>

<P><STRONG><a name="[18f]"></a>Stm32_Clock_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Stm32_Clock_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYRCC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c1]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[2c2]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>IsSlaveModValid</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRcvHandle
</UL>

<P><STRONG><a name="[1d0]"></a>RfSlaveMulticodeInvert</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RfSlaveMulticodeInvert
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSlaveFlashCalc
</UL>

<P><STRONG><a name="[1d1]"></a>RfSlaveMcodeInvert</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RfSlaveMcodeInvert
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSlaveFlashCalc
</UL>

<P><STRONG><a name="[1cf]"></a>RfSlaveFlashCalc</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RfSlaveFlashCalc &rArr; CanExposeTimeCal
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanExposeTimeCal
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSlaveMcodeInvert
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSlaveMulticodeInvert
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRcvHandle
</UL>

<P><STRONG><a name="[1d3]"></a>CalcSum</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CalcSum
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePara
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRcvHandle
</UL>

<P><STRONG><a name="[1d2]"></a>UartRcvHandle</STRONG> (Thumb, 606 bytes, Stack size 40 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = UartRcvHandle &rArr; EXTIx_Init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIx_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfParaSend
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSum
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSlaveFlashCalc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSlaveModValid
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[53]"></a>USART2_IRQHandler</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = USART2_IRQHandler &rArr; UartRcvHandle &rArr; EXTIx_Init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRcvHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[172]"></a>RfMcodeCovert</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeFlash
</UL>

<P><STRONG><a name="[2c3]"></a>RfMcodeInvert</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>SlaveStatueCheck</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SlaveStatueCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMasterReadySet
</UL>

<P><STRONG><a name="[1d6]"></a>RfMasterReadyCheck</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMasterReadySet
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeAnalysis
</UL>

<P><STRONG><a name="[19e]"></a>RfMasterReadySet</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RfMasterReadySet &rArr; SlaveStatueCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMasterReadyCheck
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveStatueCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOnChargeLed
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspUpdate
</UL>

<P><STRONG><a name="[1d7]"></a>uart1_init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[2c4]"></a>Uart2PortSet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>uart2_init</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uart2_init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownProc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForUartIdle
</UL>

<P><STRONG><a name="[195]"></a>LoadUartSendBuf</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LoadUartSendBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRecoverInfo
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfPreFlashInfo
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfParaSend
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSctSend
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFlashConfirm
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCountDownInfo
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspUpdate
</UL>

<P><STRONG><a name="[1da]"></a>LoadUartArray</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoadUartArray
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFlashConfirm
</UL>

<P><STRONG><a name="[196]"></a>TrigerUartSend</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = TrigerUartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRecoverInfo
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfPreFlashInfo
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfParaSend
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSctSend
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFlashConfirm
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCountDownInfo
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspUpdate
</UL>

<P><STRONG><a name="[11d]"></a>UartSctSend</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = UartSctSend &rArr; TrigerUartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrigerUartSend
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUartSendBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepTimerProc
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownProc
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspUpdate
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMoudleSet
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyOk
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChanSetConfirm
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnGrSel
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnChScan
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnSlaveTest
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnSlaveModel
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnRel
</UL>

<P><STRONG><a name="[180]"></a>RfPreFlashInfo</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = RfPreFlashInfo &rArr; TrigerUartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrigerUartSend
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUartSendBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
</UL>

<P><STRONG><a name="[e8]"></a>WaitForUartIdle</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WaitForUartIdle &rArr; uart2_init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRecoverInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFlashConfirm
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCountDownInfo
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspUpdate
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIntSet
</UL>

<P><STRONG><a name="[131]"></a>RfCountDownInfo</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = RfCountDownInfo &rArr; WaitForUartIdle &rArr; uart2_init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrigerUartSend
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUartSendBuf
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForUartIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot
</UL>

<P><STRONG><a name="[182]"></a>RfRecoverInfo</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = RfRecoverInfo &rArr; WaitForUartIdle &rArr; uart2_init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrigerUartSend
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUartSendBuf
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForUartIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
</UL>

<P><STRONG><a name="[1dd]"></a>GR_EXT_CODE</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GR_EXT_CODE
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrLoadPara
</UL>

<P><STRONG><a name="[1dc]"></a>GrModConvert</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeAnalysis
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrLoadPara
</UL>

<P><STRONG><a name="[1f6]"></a>GrModRevert</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParameter
</UL>

<P><STRONG><a name="[1db]"></a>GrLoadPara</STRONG> (Thumb, 452 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GrLoadPara &rArr; GR_EXT_CODE
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrModConvert
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GR_EXT_CODE
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFlashConfirm
</UL>

<P><STRONG><a name="[130]"></a>RfFlashConfirm</STRONG> (Thumb, 140 bytes, Stack size 128 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = RfFlashConfirm &rArr; WaitForUartIdle &rArr; uart2_init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrigerUartSend
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUartSendBuf
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForUartIdle
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlmMulFrqRev
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMulTimeRev
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrLoadPara
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUartArray
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot
</UL>

<P><STRONG><a name="[181]"></a>U2SendData</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSendData
</UL>

<P><STRONG><a name="[1e0]"></a>uartSendData</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U2SendData
</UL>

<P><STRONG><a name="[185]"></a>noprintf</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
</UL>

<P><STRONG><a name="[14e]"></a>PortInit</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PortInit &rArr; EXTIx_Init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIx_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Interrupt_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Enable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Config
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownProc
</UL>

<P><STRONG><a name="[11c]"></a>SavePara</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SavePara &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; STMFLASH_WriteHalfWord &rArr; STMFLASH_WaitDone &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSum
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RgbCheckProc
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChanSetConfirm
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnSave
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnHome
</UL>

<P><STRONG><a name="[14c]"></a>PortUninit</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = PortUninit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Disable
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Write
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownProc
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepPortUninit
</UL>

<P><STRONG><a name="[14a]"></a>PWM_Init</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PWM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BzOff
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_ON
</UL>

<P><STRONG><a name="[1e4]"></a>RGB_IIcAck</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RGB_IIcAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_IicSendByte
</UL>

<P><STRONG><a name="[1e5]"></a>RGB_IIcStart</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RGB_IIcStart &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rgb_IIC_ReadWord
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rgb_IIC_ReadByte
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rgb_IIC_WriteByte
</UL>

<P><STRONG><a name="[1e6]"></a>RGB_IIcStop</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RGB_IIcStop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rgb_IIC_ReadWord
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rgb_IIC_ReadByte
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rgb_IIC_WriteByte
</UL>

<P><STRONG><a name="[1e7]"></a>RGB_IicSendByte</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RGB_IicSendByte &rArr; RGB_IIcAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_IIcAck
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rgb_IIC_ReadWord
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rgb_IIC_ReadByte
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rgb_IIC_WriteByte
</UL>

<P><STRONG><a name="[1e8]"></a>RGB_IicReadByte</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RGB_IicReadByte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rgb_IIC_ReadWord
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rgb_IIC_ReadByte
</UL>

<P><STRONG><a name="[1e9]"></a>Rgb_IIC_WriteByte</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Rgb_IIC_WriteByte &rArr; RGB_IicSendByte &rArr; RGB_IIcAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_IicSendByte
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_IIcStop
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_IIcStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1745_Init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopBH1745
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBH1745
</UL>

<P><STRONG><a name="[1ea]"></a>Rgb_IIC_ReadByte</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Rgb_IIC_ReadByte &rArr; RGB_IicSendByte &rArr; RGB_IIcAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_IicReadByte
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_IicSendByte
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_IIcStop
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_IIcStart
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRgbCvtState
</UL>

<P><STRONG><a name="[1eb]"></a>Rgb_IIC_ReadWord</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Rgb_IIC_ReadWord &rArr; RGB_IicSendByte &rArr; RGB_IIcAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_IicReadByte
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_IicSendByte
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_IIcStop
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_IIcStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1745_ReadChan
</UL>

<P><STRONG><a name="[1ec]"></a>StartBH1745</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = StartBH1745 &rArr; Rgb_IIC_WriteByte &rArr; RGB_IicSendByte &rArr; RGB_IIcAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rgb_IIC_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRgbSample
</UL>

<P><STRONG><a name="[1ed]"></a>StopBH1745</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = StopBH1745 &rArr; Rgb_IIC_WriteByte &rArr; RGB_IicSendByte &rArr; RGB_IIcAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rgb_IIC_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopRgbSample
</UL>

<P><STRONG><a name="[1ee]"></a>BH1745_ReadChan</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BH1745_ReadChan &rArr; Rgb_IIC_ReadWord &rArr; RGB_IicSendByte &rArr; RGB_IIcAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rgb_IIC_ReadWord
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rgb_ReadChan
</UL>

<P><STRONG><a name="[1ef]"></a>BH1745_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rgb_IIC_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rgb_Init
</UL>

<P><STRONG><a name="[15c]"></a>StartRgbSample</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = StartRgbSample &rArr; StartBH1745 &rArr; Rgb_IIC_WriteByte &rArr; RGB_IicSendByte &rArr; RGB_IIcAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBH1745
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RgbTest
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RgbCheckProc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMonitor
</UL>

<P><STRONG><a name="[160]"></a>StopRgbSample</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = StopRgbSample &rArr; StopBH1745 &rArr; Rgb_IIC_WriteByte &rArr; RGB_IicSendByte &rArr; RGB_IIcAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopBH1745
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RgbTest
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RgbCheckProc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMonitor
</UL>

<P><STRONG><a name="[15d]"></a>GetRgbCvtState</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GetRgbCvtState &rArr; Rgb_IIC_ReadByte &rArr; RGB_IicSendByte &rArr; RGB_IIcAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rgb_IIC_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RgbTest
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RgbCheckProc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMonitor
</UL>

<P><STRONG><a name="[15e]"></a>Rgb_ReadChan</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Rgb_ReadChan &rArr; BH1745_ReadChan &rArr; Rgb_IIC_ReadWord &rArr; RGB_IicSendByte &rArr; RGB_IIcAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1745_ReadChan
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RgbTest
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RgbCheckProc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMonitor
</UL>

<P><STRONG><a name="[1f0]"></a>Rgb_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1745_Init
</UL>

<P><STRONG><a name="[159]"></a>SPIx_Init</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPIx_Init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortInit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMstPreflaProc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSlaveSleepScr
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComSpiReady
</UL>

<P><STRONG><a name="[158]"></a>EXTIx_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXTIx_Init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortInit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMstPreflaProc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSlaveSleepScr
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComSpiReady
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRcvHandle
</UL>

<P><STRONG><a name="[17e]"></a>SetPreFlashDA</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetPreFlashDA &rArr; HpExpCodeSend &rArr; hp_IicSendByte &rArr; hp_IIcAck
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HpExpCodeSend
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCmpPower
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
</UL>

<P><STRONG><a name="[179]"></a>HpPreflash</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HpPreflash &rArr; TakePreFlash &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakePreFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMstPreflaProc
</UL>

<P><STRONG><a name="[177]"></a>SPIx_Disable</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashFinishProc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashHandle
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Stop
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComResumeInt
</UL>

<P><STRONG><a name="[1f1]"></a>SetComResumeInt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetComResumeInt &rArr; Ex_NVIC_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Disable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Enable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[1f2]"></a>SetComSpiReady</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetComSpiReady &rArr; EXTIx_Init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[1f3]"></a>Com_Stop</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Com_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlinkCmrHandle
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[44]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 664 bytes, Stack size 40 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = EXTI9_5_IRQHandler &rArr; SetComSpiReady &rArr; EXTIx_Init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Disable
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIx_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Enable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Disable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Config
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Stop
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComSpiReady
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComResumeInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2c5]"></a>SPIx_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[2c6]"></a>SPIx_SetSpeed</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>SpiRearUp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SpiRearUp &rArr; Timer4_Init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspUpdate
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashHandle
</UL>

<P><STRONG><a name="[1f4]"></a>CodeAnalysis</STRONG> (Thumb, 3674 bytes, Stack size 72 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CodeAnalysis
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrModConvert
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMasterReadyCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>

<P><STRONG><a name="[1f5]"></a>GetParameter</STRONG> (Thumb, 2394 bytes, Stack size 104 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GetParameter
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrModRevert
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>

<P><STRONG><a name="[1fa]"></a>CanInquire</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashHandle
</UL>

<P><STRONG><a name="[1f8]"></a>MulTimeRev</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MulTimeRev
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildExposeCmd
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlmMulTimeRev
</UL>

<P><STRONG><a name="[1f7]"></a>WlmMulTimeRev</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MulTimeRev
</UL>

<P><STRONG><a name="[1df]"></a>WlmMulFrqRev</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFlashConfirm
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildExposeCmd
</UL>

<P><STRONG><a name="[12b]"></a>BuildExposeCmd</STRONG> (Thumb, 596 bytes, Stack size 24 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BuildExposeCmd &rArr; MulTimeRev
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MulTimeRev
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlmMulFrqRev
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashHandle
</UL>

<P><STRONG><a name="[1f9]"></a>FlashHandle</STRONG> (Thumb, 1294 bytes, Stack size 40 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = FlashHandle &rArr; BuildExposeCmd &rArr; MulTimeRev
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRearUp
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Disable
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildExposeCmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanExposeTimeCal
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanInquire
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>

<P><STRONG><a name="[50]"></a>SPI1_IRQHandler</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = SPI1_IRQHandler &rArr; GetParameter
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRearUp
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Enable
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashHandle
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParameter
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeAnalysis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2c7]"></a>RfMulTimeCalc</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>RfMulTimeRev</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFlashConfirm
</UL>

<P><STRONG><a name="[1fb]"></a>FoclenRefresh</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = FoclenRefresh &rArr; DisplayFocLen &rArr; DisplayPicture &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotoStdIndex
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFocLen
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspUpdate
</UL>

<P><STRONG><a name="[2c8]"></a>ChkAllNone</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>ClearSlavesStatue</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ClearSlavesStatue
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspUpdate
</UL>

<P><STRONG><a name="[145]"></a>DspUpdate</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = DspUpdate &rArr; Mode &rArr; ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrigerUartSend
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRearUp
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMasterReadySet
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUartSendBuf
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForUartIdle
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSctSend
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMoudleSet
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDevLinkMark
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFlashTimeOut
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSlavesStatue
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FoclenRefresh
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskKeyScan
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDspUpdate
</UL>

<P><STRONG><a name="[1fd]"></a>TaskDspUpdate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspUpdate
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDspUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDspUpdate
</UL>

<P><STRONG><a name="[2c9]"></a>RfSlaveZeroTimes</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>UnlinkCmrHandle</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UnlinkCmrHandle &rArr; Ex_NVIC_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Enable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Config
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[4b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = TIM4_IRQHandler &rArr; UnlinkCmrHandle &rArr; Ex_NVIC_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlinkCmrHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[16a]"></a>Timer4_Init</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Timer4_Init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRearUp
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveMultiFlash
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeMultiFlash
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiFlashTimer
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[2ca]"></a>Timer4_Update</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>TmCaptureInit</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TmCaptureInit &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepTimerProc
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BzOff
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveResume
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuncModuleSw
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnexpectHandle
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveParaClear
</UL>

<P><STRONG><a name="[7d]"></a>StopCapture</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSlaveSleepScr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BzOff
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuncModuleSw
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnexpectHandle
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveParaClear
</UL>

<P><STRONG><a name="[132]"></a>StartCapture</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot
</UL>

<P><STRONG><a name="[4a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = TIM3_IRQHandler &rArr; ParseMstCmd &rArr; LightSlaveTtlPilot &rArr; UnexpectHandle &rArr; TmCaptureInit &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMstCmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2cb]"></a>TmTickHandle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[1ff]"></a>TaskTimerTickCom</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskTimerTickCom
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskTimerTickCom
</UL>

<P><STRONG><a name="[205]"></a>STMFLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stmflash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[206]"></a>STMFLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stmflash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[201]"></a>STMFLASH_GetStatus</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stmflash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WaitDone
</UL>

<P><STRONG><a name="[200]"></a>STMFLASH_WaitDone</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stmflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = STMFLASH_WaitDone &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WriteHalfWord
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ErasePage
</UL>

<P><STRONG><a name="[202]"></a>STMFLASH_ErasePage</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stmflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = STMFLASH_ErasePage &rArr; STMFLASH_WaitDone &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WaitDone
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[203]"></a>STMFLASH_WriteHalfWord</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stmflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = STMFLASH_WriteHalfWord &rArr; STMFLASH_WaitDone &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WaitDone
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write_NoCheck
</UL>

<P><STRONG><a name="[2cc]"></a>STMFLASH_ReadHalfWord</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stmflash.o(.text), UNUSED)

<P><STRONG><a name="[204]"></a>STMFLASH_Write_NoCheck</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, stmflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = STMFLASH_Write_NoCheck &rArr; STMFLASH_WriteHalfWord &rArr; STMFLASH_WaitDone &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WriteHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[18e]"></a>STMFLASH_Read</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stmflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STMFLASH_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInit
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[1e2]"></a>STMFLASH_Write</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, stmflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; STMFLASH_WriteHalfWord &rArr; STMFLASH_WaitDone &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write_NoCheck
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ErasePage
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Lock
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePara
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Write
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnReset
</UL>

<P><STRONG><a name="[207]"></a>Test_Write</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, stmflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[2cd]"></a>LcdDelay</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcddriver.o(.text), UNUSED)

<P><STRONG><a name="[2ce]"></a>LCD_Writ_Bus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lcddriver.o(.text), UNUSED)

<P><STRONG><a name="[208]"></a>LCD_WRITE_CMD</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lcddriver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaSet
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST75256_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOff
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetContrast
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayParaCmlSkip
</UL>

<P><STRONG><a name="[ad]"></a>LCD_WRITE_BYTE</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lcddriver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawFrame
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCopyToRam
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMstRatioHead
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspID
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspGrMode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawScale
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTtlCmp_canStyle
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPicture
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMstOtp_canStyle
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFocLen
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaSet
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmpFeb
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspFebIcon
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspCmpIcon
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClearFeild
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSensorRgbWarn
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSensors
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawScaleNum
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawScopeNum
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawScaleRuler
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST75256_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetContrast
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContrastSet
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayParaCmlSkip
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_ShowCmpFebChar
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspCmpFeb
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayButton
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayABRation
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspRfIdChar
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSensorsEx
</UL>

<P><STRONG><a name="[ac]"></a>AreaSet</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawFrame
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCopyToRam
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMstRatioHead
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspID
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspGrMode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawScale
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTtlCmp_canStyle
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPicture
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMstOtp_canStyle
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFocLen
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmpFeb
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspFebIcon
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspCmpIcon
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClearFeild
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSensorRgbWarn
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSensors
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawScaleNum
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawScopeNum
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawScaleRuler
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContrastSet
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_ShowCmpFebChar
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspCmpFeb
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayButton
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayABRation
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspRfIdChar
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSensorsEx
</UL>

<P><STRONG><a name="[209]"></a>ST75256_Init</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ST75256_Init &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[19f]"></a>SetContrast</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetContrast
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContrastSet
</UL>

<P><STRONG><a name="[191]"></a>LcdPortInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LcdPortInit &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[151]"></a>LCD_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_Init &rArr; LcdPortInit &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPortInit
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST75256_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownProc
</UL>

<P><STRONG><a name="[1cd]"></a>DisplayOff</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcddriver.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Init
</UL>

<P><STRONG><a name="[c1]"></a>DisplayPicture</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DisplayPicture &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaSet
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSlaveSleepScr
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadLowBatIcon
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuncDsp
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspRfSlavePara
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMstModIcon
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLightSlavePara
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFocLen
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCanMstHead
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDevLinkMark
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRfGrScr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtmScr
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtaScr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiScr
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetManuScr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTtlScr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSynMode
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdLoadPicture
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMotoWarn
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspFnIcon
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUncompetibleIcon
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCfnAllClear
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnChScan
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspScanResult
</UL>

<P><STRONG><a name="[ba]"></a>LcdCopyToRam</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LcdCopyToRam &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMstChan
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLinkshotChan
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterPfnSubMenu
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCfnSubMenu
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspIsoValue
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspApertValue
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TtlDebugDspDat
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChSanSubAdd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModLinkedShot
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMenuIcon
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrDrawSelBar
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiDspNum
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMultiHz
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiLink
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContrastSet
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspScanResult
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSubMenu
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSnrTitle
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSnrBar
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSnrMenu
</UL>

<P><STRONG><a name="[92]"></a>LcdClearFeild</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LcdClearFeild &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaSet
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuncDsp
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMstModIcon
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspIsoValue
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspID
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspClearAllPara
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFocLen
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDevLinkMark
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRfGrScr
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrDspPara
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSynMode
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LayoutClear
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMotoWarn
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnGrSel
</UL>

<P><STRONG><a name="[ce]"></a>DspIsoValue</STRONG> (Thumb, 324 bytes, Stack size 56 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DspIsoValue &rArr; LcdCopyToRam &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCopyToRam
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClearFeild
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtmIsoSubAdd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtmScr
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_test
</UL>

<P><STRONG><a name="[20a]"></a>Lcd_test</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lcddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspIsoValue
</UL>

<P><STRONG><a name="[142]"></a>LCD_Clear</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSlaveSleepScr
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownProc
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBattery
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadLowBatIcon
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FiberAdjustProc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterPfnSubMenu
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCfnSubMenu
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnSnrMenu
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnPfnMenu
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkVoltage
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnChScan
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspScanResult
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnCfnClearCancel
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnCfnClear
</UL>

<P><STRONG><a name="[2cf]"></a>LcdGrAllClear</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcddriver.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>DspClearAllPara</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DspClearAllPara &rArr; LcdClearFeild &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClearFeild
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyOk
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModLinkedShot
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCfnAllClear
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnIdSet
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnIdSel
</UL>

<P><STRONG><a name="[95]"></a>LcdLoadPicture</STRONG> (Thumb, 24 bytes, Stack size 20 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LcdLoadPicture &rArr; DisplayPicture &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPicture
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspID
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtmScr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LayModeExtM
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LayModeExtA
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LayModeGr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LayModeMulti
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LayModeManu
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LayModeEttl
</UL>

<P><STRONG><a name="[2d0]"></a>DspTest</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcddriver.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BtnAddSub</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = BtnAddSub &rArr; Mode &rArr; ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>BtnTtlFeb</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = BtnTtlFeb &rArr; Mode &rArr; ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[20b]"></a>AddButtons</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AddButtons
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfgrSelMenu
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfArrSelMenu
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FiberAdjustProc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterPfnSubMenu
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCfnSubMenu
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspPfnMenu
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspCfnMenu
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildFuncMenu
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnGrParaRes
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCfnAllClear
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildLinkedShotMenu
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnChScan
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnMemory
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnIdSel
</UL>

<P><STRONG><a name="[e1]"></a>BuildFuncMenu</STRONG> (Thumb, 1750 bytes, Stack size 24 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BuildFuncMenu &rArr; AddButtons
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddButtons
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadButtons
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnRatio
</UL>

<P><STRONG><a name="[7]"></a>BtnRatio</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = BtnRatio &rArr; Mode &rArr; ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildFuncMenu
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMenuSw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>BtnMulti</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lcddriver.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>BtnFrq</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lcddriver.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[fc]"></a>RfArrSelMenu</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = RfArrSelMenu &rArr; KeyMenuSw &rArr; InsertList &rArr; DisplayButton &rArr; LoadMenuChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMenuSw
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddButtons
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyOk
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arr_SubAdd
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnGrSel
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnArrParaRes
</UL>

<P><STRONG><a name="[108]"></a>RfgrSelMenu</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = RfgrSelMenu &rArr; KeyMenuSw &rArr; InsertList &rArr; DisplayButton &rArr; LoadMenuChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMenuSw
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddButtons
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnGrParaRes
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfGrModSubAdd
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnGrSel
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnGrOnOff
</UL>

<P><STRONG><a name="[8]"></a>BtnGrSel</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = BtnGrSel &rArr; Mode &rArr; ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSctSend
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfgrSelMenu
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfArrSelMenu
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModPasteScr
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfGrDspPara
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrDrawSelBar
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClearFeild
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>BtnMenu</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lcddriver.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>BtnZoon</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = BtnZoon &rArr; Mode &rArr; ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[cf]"></a>DspApertValue</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DspApertValue &rArr; LcdCopyToRam &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCopyToRam
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuncDsp
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtmApertSubAdd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtmScr
</UL>

<P><STRONG><a name="[20d]"></a>ResScaleFont</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lcddriver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawScaleNum
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawScopeNum
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawScaleRuler
</UL>

<P><STRONG><a name="[20c]"></a>DrawScaleRuler</STRONG> (Thumb, 450 bytes, Stack size 32 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DrawScaleRuler &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaSet
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResScaleFont
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawScale
</UL>

<P><STRONG><a name="[20e]"></a>DrawScopeNum</STRONG> (Thumb, 442 bytes, Stack size 40 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DrawScopeNum &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaSet
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResScaleFont
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawScale
</UL>

<P><STRONG><a name="[211]"></a>ReStdPara</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lcddriver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtaModSet
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAvailScaleEx
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAvailScaleHp
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAvailScale
</UL>

<P><STRONG><a name="[210]"></a>GetMotoIncremental</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lcddriver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtaModSet
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtmModSet
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAvailScaleEx
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAvailScaleHp
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAvailScale
</UL>

<P><STRONG><a name="[20f]"></a>CalcAvailScale</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CalcAvailScale
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotoStdIndex
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotoIncremental
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReStdPara
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawScale
</UL>

<P><STRONG><a name="[212]"></a>CalcAvailScaleHp</STRONG> (Thumb, 438 bytes, Stack size 40 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CalcAvailScaleHp
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotoStdIndex
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotoIncremental
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReStdPara
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawScale
</UL>

<P><STRONG><a name="[213]"></a>CalcAvailScaleEx</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CalcAvailScaleEx
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotoStdIndex
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtmApertIndex
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtmIsoIndex
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotoIncremental
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReStdPara
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawScale
</UL>

<P><STRONG><a name="[215]"></a>ScaleStrLen</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ScaleStrLen
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawScaleNum
</UL>

<P><STRONG><a name="[214]"></a>DrawScaleNum</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DrawScaleNum &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaSet
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScaleStrLen
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResScaleFont
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawScale
</UL>

<P><STRONG><a name="[d0]"></a>DrawScale</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = DrawScale &rArr; DrawScopeNum &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaSet
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawScaleNum
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAvailScaleEx
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAvailScaleHp
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAvailScale
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawScopeNum
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawScaleRuler
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuncDsp
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtmIsoSubAdd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtmApertSubAdd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtmScr
</UL>

<P><STRONG><a name="[216]"></a>LoadUncompetibleIcon</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LoadUncompetibleIcon &rArr; DisplayPicture &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPicture
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuncDsp
</UL>

<P><STRONG><a name="[217]"></a>DspFnIcon</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DspFnIcon &rArr; DisplayPicture &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPicture
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuncDsp
</UL>

<P><STRONG><a name="[219]"></a>TitleGetIndex</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TitleGetIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadZoomChar
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTitleChar
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspRfIdChar
</UL>

<P><STRONG><a name="[218]"></a>LoadZoomChar</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LoadZoomChar &rArr; TitleGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TitleGetIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFocLen
</UL>

<P><STRONG><a name="[f6]"></a>DisplayFocLen</STRONG> (Thumb, 420 bytes, Stack size 40 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DisplayFocLen &rArr; DisplayPicture &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPicture
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaSet
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClearFeild
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadZoomChar
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotoLocation
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuncDsp
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMotoSet
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotoShift
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FoclenRefresh
</UL>

<P><STRONG><a name="[21a]"></a>DspMotoWarn</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DspMotoWarn &rArr; DisplayPicture &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPicture
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClearFeild
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuncDsp
</UL>

<P><STRONG><a name="[21b]"></a>DspSensors</STRONG> (Thumb, 440 bytes, Stack size 56 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DspSensors &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaSet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuncDsp
</UL>

<P><STRONG><a name="[21c]"></a>DspSensorRgbWarn</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DspSensorRgbWarn &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaSet
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuncDsp
</UL>

<P><STRONG><a name="[ec]"></a>AreaScroll</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AreaScroll
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTtlCmp_canStyle
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMstOtp_canStyle
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModLinkedShot
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSnrMenu
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSensorsEx
</UL>

<P><STRONG><a name="[21d]"></a>DspSensorsEx</STRONG> (Thumb, 536 bytes, Stack size 64 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DspSensorsEx &rArr; AreaScroll
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaSet
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaScroll
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuncDsp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FiberAdjustProc
</UL>

<P><STRONG><a name="[f1]"></a>FuncDsp</STRONG> (Thumb, 652 bytes, Stack size 48 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = FuncDsp &rArr; DrawScale &rArr; DrawScopeNum &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspApertValue
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawScale
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPicture
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFocLen
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClearFeild
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSensorRgbWarn
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSensors
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMotoWarn
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspFnIcon
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUncompetibleIcon
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSensorsEx
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnMstSw
</UL>

<P><STRONG><a name="[3]"></a>BtnMstSw</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = BtnMstSw &rArr; FuncDsp &rArr; DrawScale &rArr; DrawScopeNum &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOnChargeLed
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuncDsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[21e]"></a>DspRfIdChar</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DspRfIdChar &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaSet
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TitleGetIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspID
</UL>

<P><STRONG><a name="[105]"></a>DspID</STRONG> (Thumb, 326 bytes, Stack size 28 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DspID &rArr; LcdLoadPicture &rArr; DisplayPicture &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaSet
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdLoadPicture
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClearFeild
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspRfIdChar
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyOk
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdSetSubAdd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdSelSubAdd
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnIdSet
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnIdSel
</UL>

<P><STRONG><a name="[a]"></a>BtnIdSel</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = BtnIdSel &rArr; KeyMenuSw &rArr; InsertList &rArr; DisplayButton &rArr; LoadMenuChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspID
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspClearAllPara
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMenuSw
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddButtons
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[21f]"></a>BtnIdSet</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, lcddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspID
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspClearAllPara
</UL>

<P><STRONG><a name="[9]"></a>BtnChSet</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = BtnChSet &rArr; Mode &rArr; ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[220]"></a>BtnReset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[12]"></a>BtnRel</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = BtnRel &rArr; UartSctSend &rArr; TrigerUartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSctSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>BtnMemory</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = BtnMemory &rArr; Mode &rArr; ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMenuSw
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddButtons
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[2d1]"></a>BtnSmSel</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcddriver.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>BtnSmSub</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcddriver.o(.text), UNUSED)

<P><STRONG><a name="[19]"></a>BtnHome</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = BtnHome &rArr; KeyOk &rArr; Mode &rArr; ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePara
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyOk
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnChScan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>BtnSynSet</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, lcddriver.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[222]"></a>PfnCharGetIndex</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lcddriver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadPfnString
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadPfnChar
</UL>

<P><STRONG><a name="[221]"></a>LoadPfnChar</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LoadPfnChar
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PfnCharGetIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadPfnString
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterPfnSubMenu
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCfnSubMenu
</UL>

<P><STRONG><a name="[eb]"></a>LoadPfnString</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LoadPfnString &rArr; LoadPfnChar
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadPfnChar
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PfnCharGetIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterPfnSubMenu
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCfnSubMenu
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModLinkedShot
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSnrMenu
</UL>

<P><STRONG><a name="[224]"></a>PfnSubCharGetIndex</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lcddriver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSnrSubStr
</UL>

<P><STRONG><a name="[223]"></a>DspSnrSubStr</STRONG> (Thumb, 138 bytes, Stack size 28 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DspSnrSubStr
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PfnSubCharGetIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSubMenu
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSnrMenu
</UL>

<P><STRONG><a name="[b0]"></a>RamLoadPicture</STRONG> (Thumb, 80 bytes, Stack size 36 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RamLoadPicture
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModLinkedShot
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmpFeb
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContrastSet
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSnrMenu
</UL>

<P><STRONG><a name="[225]"></a>DspSnrMenu</STRONG> (Thumb, 460 bytes, Stack size 64 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = DspSnrMenu &rArr; LoadPfnString &rArr; LoadPfnChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamLoadPicture
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadPfnString
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCopyToRam
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaScroll
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSnrSubStr
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterPfnSubMenu
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCfnSubMenu
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspPfnMenu
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspCfnMenu
</UL>

<P><STRONG><a name="[226]"></a>DspSnrBar</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DspSnrBar &rArr; LcdCopyToRam &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCopyToRam
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspPfnMenu
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspCfnMenu
</UL>

<P><STRONG><a name="[227]"></a>DspSnrTitle</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DspSnrTitle &rArr; LcdCopyToRam &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCopyToRam
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspPfnMenu
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspCfnMenu
</UL>

<P><STRONG><a name="[10b]"></a>DspCfnMenu</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = DspCfnMenu &rArr; KeyMenuSw &rArr; InsertList &rArr; DisplayButton &rArr; LoadMenuChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMenuSw
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddButtons
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSnrTitle
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSnrBar
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSnrMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnSnrMenu
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrMenuSubAdd
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnCfnClearCancel
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnCfnClear
</UL>

<P><STRONG><a name="[10d]"></a>DspPfnMenu</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = DspPfnMenu &rArr; KeyMenuSw &rArr; InsertList &rArr; DisplayButton &rArr; LoadMenuChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMenuSw
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddButtons
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSnrTitle
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSnrBar
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSnrMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnPfnMenu
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PfnMenuSubAdd
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnCfnClearCancel
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnCfnClear
</UL>

<P><STRONG><a name="[228]"></a>DspSubMenu</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DspSubMenu &rArr; LcdCopyToRam &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCopyToRam
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSnrSubStr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterPfnSubMenu
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCfnSubMenu
</UL>

<P><STRONG><a name="[10f]"></a>EnterCfnSubMenu</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = EnterCfnSubMenu &rArr; KeyMenuSw &rArr; InsertList &rArr; DisplayButton &rArr; LoadMenuChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadPfnString
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCopyToRam
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMenuSw
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddButtons
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSubMenu
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSnrMenu
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadPfnChar
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyOk
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrSubMenu
</UL>

<P><STRONG><a name="[111]"></a>EnterPfnSubMenu</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = EnterPfnSubMenu &rArr; KeyMenuSw &rArr; InsertList &rArr; DisplayButton &rArr; LoadMenuChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadPfnString
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCopyToRam
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMenuSw
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddButtons
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSubMenu
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSnrMenu
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadPfnChar
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyOk
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PfnSubMenu
</UL>

<P><STRONG><a name="[2]"></a>BtnSnrMenu</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = BtnSnrMenu &rArr; DspCfnMenu &rArr; KeyMenuSw &rArr; InsertList &rArr; DisplayButton &rArr; LoadMenuChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspCfnMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyOk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>BtnPfnMenu</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = BtnPfnMenu &rArr; DspPfnMenu &rArr; KeyMenuSw &rArr; InsertList &rArr; DisplayButton &rArr; LoadMenuChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspPfnMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyOk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>BtnGrOnOff</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = BtnGrOnOff &rArr; RfGrDspPara &rArr; GrDspPara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOnChargeLed
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfgrSelMenu
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfGrDspPara
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>BtnGrParaRes</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = BtnGrParaRes &rArr; RfGrDspPara &rArr; GrDspPara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfgrSelMenu
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMenuSw
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfGrDspPara
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrDrawSelBar
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddButtons
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyOk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[22c]"></a>CanCharLen</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanCharLen
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCmpFebData
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMstOtp_canStyle
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTtlCmp_classStyle
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspCmpFeb
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayButton
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayABRation
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCanOtpString
</UL>

<P><STRONG><a name="[22a]"></a>CanCharGetIndex</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanCharGetIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadMenuChar
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCmpFebChar
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTtlCmp_canStyle
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_ShowCmpFebChar
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCanParaChar
</UL>

<P><STRONG><a name="[229]"></a>LoadCanParaChar</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanCharGetIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMstOtp_canStyle
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayABRation
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCanCmpString
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCanOtpString
</UL>

<P><STRONG><a name="[22b]"></a>DisplayCanOtpString</STRONG> (Thumb, 302 bytes, Stack size 52 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCanParaChar
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanCharLen
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMstOtp_canStyle
</UL>

<P><STRONG><a name="[b5]"></a>DisplayMstOtp_canStyle</STRONG> (Thumb, 438 bytes, Stack size 64 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaSet
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaScroll
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCanOtpString
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCanParaChar
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanCharLen
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOutput
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMstOtp
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiPara
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetManuPara
</UL>

<P><STRONG><a name="[d3]"></a>DisplayMstOtp</STRONG> (Thumb, 56 bytes, Stack size 56 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMstOtp_canStyle
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspIndividualSlavePara
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCanMstHead
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrDspPara
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSlavePara
</UL>

<P><STRONG><a name="[22e]"></a>TitleLen</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TitleLen
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMstRatioHead
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspGrMode
</UL>

<P><STRONG><a name="[22d]"></a>DisplayTitleChar</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DisplayTitleChar &rArr; TitleGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TitleGetIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMstRatioHead
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspGrMode
</UL>

<P><STRONG><a name="[d6]"></a>DspMstRatioHead</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DspMstRatioHead &rArr; DisplayTitleChar &rArr; TitleGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaSet
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTitleChar
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TitleLen
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCanMstHead
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrDspHead
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSlavePara
</UL>

<P><STRONG><a name="[22f]"></a>DisplayCanCmpString</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DisplayCanCmpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCanParaChar
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTtlCmp_canStyle
</UL>

<P><STRONG><a name="[c5]"></a>DisplayTtlCmp_canStyle</STRONG> (Thumb, 974 bytes, Stack size 64 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = DisplayTtlCmp_canStyle &rArr; DisplayCanCmpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaSet
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaScroll
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCanCmpString
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanCharGetIndex
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTtlCmp
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtaScr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTtlScr
</UL>

<P><STRONG><a name="[d4]"></a>DisplayTtlCmp</STRONG> (Thumb, 122 bytes, Stack size 80 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = DisplayTtlCmp &rArr; DisplayTtlCmp_canStyle &rArr; DisplayCanCmpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTtlCmp_canStyle
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FiberAdjustProc
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCanMstHead
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrDspPara
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSlavePara
</UL>

<P><STRONG><a name="[231]"></a>DisplayABRation</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DisplayABRation &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaSet
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCanParaChar
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanCharLen
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCanMstHead
</UL>

<P><STRONG><a name="[c3]"></a>DisplayCanMstHead</STRONG> (Thumb, 1416 bytes, Stack size 48 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = DisplayCanMstHead &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMstRatioHead
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTtlCmp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPicture
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMstOtp
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayABRation
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyOk
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfArrParaSubAdd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arr_SubAdd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RatioSubAdd
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiScr
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetManuScr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTtlScr
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnArrParaRes
</UL>

<P><STRONG><a name="[18]"></a>BtnArrParaRes</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = BtnArrParaRes &rArr; ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfArrSelMenu
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCanMstHead
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModPasteScr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>BtnExtmIso</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lcddriver.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>BtnExtmApert</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lcddriver.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>BtnGrModRes</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = BtnGrModRes &rArr; RfGrDspPara &rArr; GrDspPara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfGrDspPara
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>BtnSave</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = BtnSave &rArr; KeyOk &rArr; Mode &rArr; ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePara
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyOk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>BtnLoad</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = BtnLoad &rArr; UserScreenOn &rArr; Mode &rArr; ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInit
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserScreenOn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[117]"></a>FiberAdjustProc</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = FiberAdjustProc &rArr; DisplayTtlCmp &rArr; DisplayTtlCmp_canStyle &rArr; DisplayCanCmpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTtlCmp
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMenuSw
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetManuPara
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddButtons
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSensorsEx
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RgbCheckProc
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FbExpSubAdd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FbAdjSubAdd
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnRgbCheck
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnFbAddSub
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnFbAdj
</UL>

<P><STRONG><a name="[20]"></a>BtnFbAdj</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = BtnFbAdj &rArr; FiberAdjustProc &rArr; DisplayTtlCmp &rArr; DisplayTtlCmp_canStyle &rArr; DisplayCanCmpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FiberAdjustProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>BtnFbAddSub</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = BtnFbAddSub &rArr; FiberAdjustProc &rArr; DisplayTtlCmp &rArr; DisplayTtlCmp_canStyle &rArr; DisplayCanCmpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FiberAdjustProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>BtnRgbCheck</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = BtnRgbCheck &rArr; FiberAdjustProc &rArr; DisplayTtlCmp &rArr; DisplayTtlCmp_canStyle &rArr; DisplayCanCmpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FiberAdjustProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>BtnCfnClear</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = BtnCfnClear &rArr; DspCfnMenu &rArr; KeyMenuSw &rArr; InsertList &rArr; DisplayButton &rArr; LoadMenuChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspPfnMenu
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspCfnMenu
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>BtnCfnClearCancel</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = BtnCfnClearCancel &rArr; DspCfnMenu &rArr; KeyMenuSw &rArr; InsertList &rArr; DisplayButton &rArr; LoadMenuChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspPfnMenu
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspCfnMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>BtnSlaveModel</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = BtnSlaveModel &rArr; UartSctSend &rArr; TrigerUartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSctSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>BtnSlaveTest</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = BtnSlaveTest &rArr; UartSctSend &rArr; TrigerUartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSctSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[b1]"></a>LoadCmpFebChar</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LoadCmpFebChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanCharGetIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMstChan
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCmpFebData
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmpFeb
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspCmpFeb
</UL>

<P><STRONG><a name="[c4]"></a>SetMstChan</STRONG> (Thumb, 344 bytes, Stack size 56 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SetMstChan &rArr; LcdCopyToRam &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCmpFebChar
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCopyToRam
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChanSetConfirm
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfChanSet
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightChanSet
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChSanSubAdd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModLinkedShot
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRfGrScr
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtaScr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiScr
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetManuScr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTtlScr
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspScanResult
</UL>

<P><STRONG><a name="[232]"></a>DspScanResult</STRONG> (Thumb, 506 bytes, Stack size 32 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DspScanResult &rArr; SetMstChan &rArr; LcdCopyToRam &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMstChan
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCopyToRam
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPicture
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnChScan
</UL>

<P><STRONG><a name="[154]"></a>DrawFrame</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DrawFrame &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaSet
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSlaveSleepScr
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnChScan
</UL>

<P><STRONG><a name="[b]"></a>BtnChScan</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = BtnChScan &rArr; BtnHome &rArr; KeyOk &rArr; Mode &rArr; ModPasteScr &rArr; SetTtlScr &rArr; DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawFrame
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSctSend
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPicture
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyOk
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMenuSw
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddButtons
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspScanResult
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnHome
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[2d3]"></a>RePaint</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcddriver.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>DspGrMode</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DspGrMode &rArr; DisplayTitleChar &rArr; TitleGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaSet
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTitleChar
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TitleLen
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrDspHead
</UL>

<P><STRONG><a name="[2d4]"></a>LcdFillBlank</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcddriver.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>LoadMenuChar</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LoadMenuChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanCharGetIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMultiHz
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayButton
</UL>

<P><STRONG><a name="[233]"></a>DisplayButton</STRONG> (Thumb, 290 bytes, Stack size 56 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DisplayButton &rArr; LoadMenuChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadMenuChar
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaSet
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanCharLen
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertList
</UL>

<P><STRONG><a name="[df]"></a>InsertList</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = InsertList &rArr; DisplayButton &rArr; LoadMenuChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayButton
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMenuSw
</UL>

<P><STRONG><a name="[2d5]"></a>DisplayMstSetDot</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcddriver.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>DspCmpFeb</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, lcddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCmpFebChar
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaSet
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanCharLen
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTtlCmp_classStyle
</UL>

<P><STRONG><a name="[235]"></a>Lcd_ShowCmpFebChar</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lcddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaSet
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanCharGetIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTtlCmp_classStyle
</UL>

<P><STRONG><a name="[236]"></a>DisplayTtlCmp_classStyle</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, lcddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_ShowCmpFebChar
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspCmpFeb
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanCharLen
</UL>

<P><STRONG><a name="[2d6]"></a>DisplayTtlScale</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcddriver.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>DisplayParaCmlSkip</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lcddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_BYTE
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WRITE_CMD
</UL>

<P><STRONG><a name="[b7]"></a>DisplayOutput</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, lcddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMstOtp_canStyle
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRmtPara
</UL>

<P><STRONG><a name="[ef]"></a>DspMstModIcon</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DspMstModIcon &rArr; DisplayPicture &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPicture
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClearFeild
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode
</UL>

<P><STRONG><a name="[f0]"></a>TakeOnCharge</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, lcddriver.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChargeDisable
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChargeEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode
</UL>

<P><STRONG><a name="[2d7]"></a>SetMstHead</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcddriver.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>SetLinkshotChan</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SetLinkshotChan &rArr; LcdCopyToRam &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCopyToRam
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChanSetConfirm
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfChanSet
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtmScr
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtaScr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiScr
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetManuScr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTtlScr
</UL>

<P><STRONG><a name="[2d8]"></a>DisplayMstSetting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcddriver.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>DspSlavePara</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMstRatioHead
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTtlCmp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMstOtp
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspRfSlavePara
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLightSlavePara
</UL>

<P><STRONG><a name="[ca]"></a>DspIndividualSlavePara</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = DspIndividualSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMstOtp
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiScr
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetManuScr
</UL>

<P><STRONG><a name="[c7]"></a>DspLightSlavePara</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = DspLightSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPicture
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiTmFrq
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSlavePara
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiScr
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetManuScr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTtlScr
</UL>

<P><STRONG><a name="[c6]"></a>DspRfSlavePara</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = DspRfSlavePara &rArr; DspSlavePara &rArr; DisplayMstOtp &rArr; DisplayMstOtp_canStyle &rArr; DisplayCanOtpString &rArr; LoadCanParaChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPicture
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiTmFrq
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSlavePara
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtaScr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiScr
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetManuScr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTtlScr
</UL>

<P><STRONG><a name="[db]"></a>DisplayRmt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcddriver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRmtC
</UL>

<P><STRONG><a name="[b2]"></a>LoadMaskData</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoadMaskData
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmpFeb
</UL>

<P><STRONG><a name="[b3]"></a>LoadCmpFebData</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LoadCmpFebData &rArr; LoadCmpFebChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCmpFebChar
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanCharLen
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmpFeb
</UL>

<P><STRONG><a name="[2d9]"></a>ParaPreserve</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcddriver.o(.text), UNUSED)

<P><STRONG><a name="[2da]"></a>SeniorMenuProc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcddriver.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>BuildLinkedShotMenu</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lcddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMenuSw
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddButtons
</UL>

<P><STRONG><a name="[2db]"></a>ScaleNumLen</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lcddriver.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>calcSqrt</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[23e]"></a>SearchScaleIndex</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, lcddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>

<P><STRONG><a name="[16e]"></a>ExtaModSet</STRONG> (Thumb, 436 bytes, Stack size 48 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ExtaModSet &rArr; HpExpCodeSend &rArr; hp_IicSendByte &rArr; hp_IIcAck
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HpExpCodeSend
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotoIncremental
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReStdPara
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInResMode
</UL>

<P><STRONG><a name="[136]"></a>ExtmModSet</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ExtmModSet &rArr; HpExpCodeSend &rArr; hp_IicSendByte &rArr; hp_IIcAck
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtmApertIndex
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtmIsoIndex
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HpExpCodeSend
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotoIncremental
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInResMode
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot
</UL>

<P><STRONG><a name="[140]"></a>LoadLowBatIcon</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LoadLowBatIcon &rArr; DisplayPicture &rArr; AreaSet
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPicture
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Disable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBattery
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkVoltage
</UL>

<P><STRONG><a name="[14]"></a>LoadCfnAllClear</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LoadCfnAllClear &rArr; KeyMenuSw &rArr; InsertList &rArr; DisplayButton &rArr; LoadMenuChar &rArr; CanCharGetIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspClearAllPara
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPicture
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMenuSw
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddButtons
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcddriver.o(.data)
</UL>
<P><STRONG><a name="[245]"></a>OS_TaskStat</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[248]"></a>OS_TaskIdle</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[192]"></a>OSInit</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OSTmr_Init &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2dc]"></a>OSIntEnter</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>OSIntExit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[251]"></a>OSSchedLock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>

<P><STRONG><a name="[252]"></a>OS_Sched</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
</UL>

<P><STRONG><a name="[254]"></a>OSSchedUnlock</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[193]"></a>OSStart</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[256]"></a>OSStatInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>

<P><STRONG><a name="[197]"></a>OSTimeTick</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2dd]"></a>OSVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[27e]"></a>OS_Dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[26c]"></a>OS_EventTaskRdy</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
</UL>

<P><STRONG><a name="[26f]"></a>OS_EventTaskWait</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>

<P><STRONG><a name="[270]"></a>OS_EventTO</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_EventTO
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>

<P><STRONG><a name="[26a]"></a>OS_EventWaitListInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>

<P><STRONG><a name="[258]"></a>OS_TCBInit</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[28f]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[2de]"></a>OS_MemCopy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[2df]"></a>OS_StrLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[2e0]"></a>OS_StrCopy</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>OSFlagAccept</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>

<P><STRONG><a name="[25c]"></a>OSFlagCreate</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>

<P><STRONG><a name="[25e]"></a>OS_FlagUnlink</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
</UL>

<P><STRONG><a name="[25f]"></a>OSFlagDel</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[260]"></a>OSFlagPend</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagBlock
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[262]"></a>OSFlagPost</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[263]"></a>OSFlagQuery</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>

<P><STRONG><a name="[24b]"></a>OS_FlagInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, os_flag.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[264]"></a>OSMemCreate</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>

<P><STRONG><a name="[265]"></a>OSMemGet</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>

<P><STRONG><a name="[266]"></a>OSMemPut</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>

<P><STRONG><a name="[267]"></a>OSMemQuery</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>

<P><STRONG><a name="[24c]"></a>OS_MemInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, os_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_MemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[268]"></a>OSQAccept</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>

<P><STRONG><a name="[269]"></a>OSQCreate</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>

<P><STRONG><a name="[26b]"></a>OSQDel</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[26d]"></a>OSQFlush</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>

<P><STRONG><a name="[26e]"></a>OSQPend</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTO
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[271]"></a>OSQPost</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[272]"></a>OSQPostFront</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[273]"></a>OSQPostOpt</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[274]"></a>OSQQuery</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>

<P><STRONG><a name="[24d]"></a>OS_QInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_q.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[275]"></a>OSSemAccept</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>

<P><STRONG><a name="[276]"></a>OSSemCreate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[277]"></a>OSSemDel</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[278]"></a>OSSemPend</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTO
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[279]"></a>OSSemPost</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
</UL>

<P><STRONG><a name="[27a]"></a>OSSemQuery</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>

<P><STRONG><a name="[27b]"></a>OSTaskChangePrio</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[189]"></a>OSTaskCreate</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[27d]"></a>OSTaskDel</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[280]"></a>OSTaskDelReq</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>

<P><STRONG><a name="[81]"></a>OSTaskResume</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTaskResume &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotoTickDriver
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIdleFlash
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveTtlPreFlash
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveTmrProc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveProc
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashHandle
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRcvHandle
</UL>

<P><STRONG><a name="[187]"></a>OSTaskSuspend</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMotoProc
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCmdSend
</UL>

<P><STRONG><a name="[281]"></a>OSTaskQuery</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[246]"></a>OSTimeDly</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[a5]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotoLocation
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RgbTest
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMonitor
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RgbCheckProc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMonitor
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepTimerProc
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownProc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskVoltageCheck
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskKeyScan
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeClear
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPilot
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskTimerTickCom
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDspUpdate
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnChScan
</UL>

<P><STRONG><a name="[283]"></a>OSTimeDlyResume</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[284]"></a>OSTimeGet</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>

<P><STRONG><a name="[285]"></a>OSTimeSet</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>

<P><STRONG><a name="[18a]"></a>OSTmrCreate</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OSTmrCreate &rArr; OSTmr_Lock &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[84]"></a>OSTmrReload</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_tmr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_ON
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFlashTimeOut
</UL>

<P><STRONG><a name="[288]"></a>OSTmrDel</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Free
</UL>

<P><STRONG><a name="[28b]"></a>OSTmrRemainGet</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
</UL>

<P><STRONG><a name="[28c]"></a>OSTmrStateGet</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
</UL>

<P><STRONG><a name="[85]"></a>OSTmrStart</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OSTmrStart &rArr; OSTmr_Lock &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashOkLedTwinkle
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspUpdate
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BkLiteOn
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_ON
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFlashTimeOut
</UL>

<P><STRONG><a name="[28e]"></a>OSTmrStop</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
</UL>

<P><STRONG><a name="[198]"></a>OSTmrSignal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[24f]"></a>OSTmr_Init</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = OSTmr_Init &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[12c]"></a>OS_ENTER_CRITICAL</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrigerUartSend
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMstPreflaProc
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakePreflash
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkVoltage
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemQuery
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[12e]"></a>OS_EXIT_CRITICAL</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrigerUartSend
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLMCmdSend
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMstPreflaProc
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakePreflash
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemQuery
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[255]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[253]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[250]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[2b]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2e1]"></a>ItDisAll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>OSTaskStkInit</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[24a]"></a>OSInitHookBegin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[24e]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[25a]"></a>OSTaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[27f]"></a>OSTaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[64]"></a>OSTaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[247]"></a>OSTaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[259]"></a>OSTCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[257]"></a>OSTimeTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[249]"></a>OSTaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[1c4]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPwrOnExti
</UL>

<P><STRONG><a name="[1c5]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPwrOnExti
</UL>

<P><STRONG><a name="[2e2]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[2e3]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[2e4]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>ADC_DeInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadLowBatIcon
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyAdcDisable
</UL>

<P><STRONG><a name="[2e5]"></a>ADC_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2e6]"></a>ADC_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2e7]"></a>ADC_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2e8]"></a>ADC_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2e9]"></a>ADC_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2ea]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2eb]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2ec]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2ee]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2ef]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2f1]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2f2]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2f3]"></a>ADC_ExternalTrigConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2f4]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2f5]"></a>ADC_GetDualModeConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2f6]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2f7]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2f8]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2f9]"></a>ADC_ExternalTrigInjectedConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2fa]"></a>ADC_SoftwareStartInjectedConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2fb]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2fc]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2fd]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2fe]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2ff]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[300]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[304]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[305]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[306]"></a>ADC_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[308]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>EXTI_Init</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPwrOnExti
</UL>

<P><STRONG><a name="[309]"></a>EXTI_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[30a]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[30b]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[30c]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>EXTI_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPwrOnExti
</UL>

<P><STRONG><a name="[1b8]"></a>FLASH_SetLatency</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[30d]"></a>FLASH_HalfCycleAccessCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[30e]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[30f]"></a>FLASH_UnlockBank1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[310]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[311]"></a>FLASH_LockBank1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[292]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[291]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UserOptionByteConfig
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtection
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnableWriteProtection
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOptionByteData
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllPages
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[293]"></a>FLASH_ErasePage</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[294]"></a>FLASH_EraseAllPages</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[295]"></a>FLASH_WaitForLastBank1Operation</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllBank1Pages
</UL>

<P><STRONG><a name="[296]"></a>FLASH_EraseAllBank1Pages</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
</UL>

<P><STRONG><a name="[298]"></a>FLASH_GetReadOutProtectionStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
</UL>

<P><STRONG><a name="[297]"></a>FLASH_EraseOptionBytes</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionStatus
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[299]"></a>FLASH_ProgramWord</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[29a]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[29b]"></a>FLASH_ProgramOptionByteData</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[29c]"></a>FLASH_EnableWriteProtection</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[29d]"></a>FLASH_ReadOutProtection</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[29e]"></a>FLASH_UserOptionByteConfig</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[312]"></a>FLASH_GetUserOptionByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[313]"></a>FLASH_GetWriteProtectionOptionByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[314]"></a>FLASH_GetPrefetchBufferStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[315]"></a>FLASH_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[316]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[317]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[318]"></a>FLASH_GetStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[29f]"></a>GPIO_DeInit</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[2a0]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[1c1]"></a>GPIO_Init</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSleepWakeIntSet
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortUninit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepWakeIntSet
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPwrOnExti
</UL>

<P><STRONG><a name="[319]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[31a]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[31b]"></a>GPIO_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[31c]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[31d]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[31e]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[31f]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[320]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortUninit
</UL>

<P><STRONG><a name="[321]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[322]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[323]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPow_Init
</UL>

<P><STRONG><a name="[1c2]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPwrOnExti
</UL>

<P><STRONG><a name="[324]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>PWR_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[325]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[326]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[327]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[329]"></a>PWR_EnterSLEEPMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPow_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBattery
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkVoltage
</UL>

<P><STRONG><a name="[32a]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[32b]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[32c]"></a>PWR_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>RCC_DeInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[1b3]"></a>RCC_HSEConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[1bc]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[1b4]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[32d]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[32e]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>RCC_PLLConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[1bb]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[1bd]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[1be]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[1b5]"></a>RCC_HCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[1b7]"></a>RCC_PCLK1Config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[1b6]"></a>RCC_PCLK2Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[32f]"></a>RCC_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[330]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[331]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>RCC_LSEConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPow_Init
</UL>

<P><STRONG><a name="[332]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[333]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[334]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
</UL>

<P><STRONG><a name="[335]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPwrOnExti
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[1c8]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPow_Init
</UL>

<P><STRONG><a name="[290]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[2a2]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
</UL>

<P><STRONG><a name="[336]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[337]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[338]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[339]"></a>RCC_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[33a]"></a>RCC_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[33b]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPow_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadLowBatIcon
</UL>

<P><STRONG><a name="[33c]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[2a3]"></a>I2S_Init</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[33d]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[33e]"></a>I2S_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[33f]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[340]"></a>I2S_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[341]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[342]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[343]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[344]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[345]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[346]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[347]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[348]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[349]"></a>SPI_CalculateCRC</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[34a]"></a>SPI_GetCRC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[34b]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[34c]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[34d]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[34e]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[34f]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[350]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>USART_DeInit</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPow_Init
</UL>

<P><STRONG><a name="[2a5]"></a>USART_Init</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[351]"></a>USART_StructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[352]"></a>USART_ClockInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[353]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[354]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[355]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[356]"></a>USART_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[357]"></a>USART_SetAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[358]"></a>USART_WakeUpConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[359]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[35a]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[35b]"></a>USART_LINCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[35c]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[35d]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[35e]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[35f]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[360]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[361]"></a>USART_SmartCardCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[362]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[363]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[364]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[365]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[366]"></a>USART_IrDAConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[367]"></a>USART_IrDACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[368]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[369]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[36a]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[36b]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLinkshotChan
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMenuIcon
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUartArray
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRcvHandle
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSnrTitle
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSnrMenu
</UL>

<P><STRONG><a name="[282]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
</UL>

<P><STRONG><a name="[36c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMstChan
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMstRatioHead
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspIsoValue
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspGrMode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspApertValue
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTtlCmp_canStyle
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMstOtp_canStyle
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFocLen
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChSanSubAdd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMenuIcon
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiDspNum
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultiLink
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspCmpFeb
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayButton
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspScanResult
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayABRation
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSubMenu
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSnrMenu
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[36d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[36e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMstChan
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLinkshotChan
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterPfnSubMenu
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCfnSubMenu
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMstRatioHead
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspIsoValue
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspGrMode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspApertValue
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTtlCmp_canStyle
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMstOtp_canStyle
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFocLen
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TtlDebugDspDat
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChSanSubAdd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModLinkedShot
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrDrawSelBar
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiDspNum
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMultiHz
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmpFeb
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspFebIcon
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspCmpIcon
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSensors
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawScopeNum
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawScaleRuler
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContrastSet
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspCmpFeb
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspScanResult
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnCfnClear
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayABRation
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSnrTitle
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSnrBar
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSnrMenu
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSensorsEx
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RgbCheckProc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMonitor
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveProc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnexpectHandle
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightSlaveParaClear
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearWlcBuf
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnReset
</UL>

<P><STRONG><a name="[36f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[23d]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcSqrt
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[2a9]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[1d8]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPreFlashDA
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTtlCmp_canStyle
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HighSpeedTriger
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCmpPower
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPreFlashDA
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HighSpeedTriger
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcSqrt
</UL>

<P><STRONG><a name="[1d9]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcSqrt
</UL>

<P><STRONG><a name="[370]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchScaleIndex
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[242]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchScaleIndex
</UL>

<P><STRONG><a name="[2ae]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[230]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTtlCmp_canStyle
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPreFlashDA
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTtlCmp_canStyle
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtaScr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTtlScr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HighSpeedTriger
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPreFlashDA
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTtlCmp_canStyle
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HighSpeedTriger
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
</UL>

<P><STRONG><a name="[23f]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchScaleIndex
</UL>

<P><STRONG><a name="[371]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[241]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchScaleIndex
</UL>

<P><STRONG><a name="[243]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchScaleIndex
</UL>

<P><STRONG><a name="[372]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchScaleIndex
</UL>

<P><STRONG><a name="[2aa]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[373]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2ab]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[374]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[375]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[2a7]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[2ad]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2ac]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[376]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2af]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[377]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[378]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[379]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[37a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[37b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[37c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[25d]"></a>OS_FlagTaskRdy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
</UL>

<P><STRONG><a name="[261]"></a>OS_FlagBlock</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
</UL>

<P><STRONG><a name="[28a]"></a>OSTmr_Free</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
</UL>

<P><STRONG><a name="[289]"></a>OSTmr_Unlink</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTmr_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[28d]"></a>OSTmr_Link</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, os_tmr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[63]"></a>OSTmr_Task</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OSTmr_Task &rArr; OSTmr_Lock &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(.text)
</UL>
<P><STRONG><a name="[287]"></a>OSTmr_Unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = OSTmr_Unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStateGet
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrRemainGet
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[286]"></a>OSTmr_Lock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSTmr_Lock &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStateGet
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrRemainGet
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
